const enUS = {
  public: {
    never: 'Never',
    center: 'Center',
    login: 'Login',
    email: 'Email',
    seen: 'Seen',
    name: 'Name',
    can: 'Can',
    username: 'User name',
    editUser: 'Edit User',
    create: 'Create',
    dashboard: 'Dashboard',
    dashboards: 'Dashboards',
    folder: 'Folder',
    import: 'Import',
    export: 'Export',
    srpFrame: 'SRP-Frame',
    newSrpFrame: 'New SRP-Frame',
    newUser: 'New user',
    addNewUser: 'Add new user',
    exportCsv: 'Export CSV',
    excelCSVDialect: 'Excel CSV Dialect',
    toggleLegend: 'Toggle legend',
    text: 'Text',
    text_: 'text',
    manage: 'Manage',
    home: 'Home',
    none: 'none',
    exact: 'exact',
    divider: 'Divider',
    playlists: 'Playlists',
    snapshots: 'Snapshots',
    explore: 'Explore',
    admin: 'admin',
    preferences: 'Preferences',
    password: 'Password',
    changePassword: 'Change Password',
    signOut: 'Sign out',
    alerting: 'Alerting',
    alert: 'Alert',
    alertRules: 'Alert Rules',
    notificationChanels: 'Notification channels',
    configuration: 'Configuration',
    datasources: 'Data Sources',
    users: 'Users',
    team: 'Team',
    teams: 'Teams',
    plugins: 'Plugins',
    images: 'images',
    apiKeys: 'API Keys',
    orgSetting: 'Org Setting',
    serverAdmin: 'Server Admin',
    org: 'Org',
    orgs: 'Orgs',
    settings: 'Settings',
    stats: 'Stats',
    orgsexport: 'Orgs Export',
    orgsImport: 'Orgs Import',
    help: 'Help',
    changelog: 'Changelog',
    apiDoc: 'API Document',
    technicalDoc: 'Technical Document',
    applicationDemo: 'Application Demo',
    platformUrl: 'Platform',
    timeRange: 'Time Range',
    saveDashboard: 'Save dashboard',
    duplicatePanel: 'Duplicate Panel',
    duplicateCard: 'Duplicate Card',
    remove: 'Remove',
    removePanel: 'Remove Panel',
    addDatasource: 'Add data source',
    select: 'Select',
    test: 'Test',
    delete: 'Delete',
    deleteUser: 'Delete User',
    back: 'Back',
    http: 'HTTP',
    userName: 'Username',
    save: 'Save',
    uiTheme: 'UI Theme',
    dark: 'Dark',
    gray: 'Gray',
    light: 'Light',
    default: 'Default',
    disabled: 'Disabled',
    utc: 'UTC',
    homeDashboard: 'Home Dashboard',
    homeSrpFrame: 'Home SRP Frame',
    timezone: 'Timezone',
    organizations: 'Organizations',
    newOrg: 'New Org',
    id: 'Id',
    newOrganization: 'New Organization',
    orgName: 'Org. name',
    value: 'Value',
    value_: 'value',
    exportDash: 'Export Dashboards',
    exportDatasouce: 'Export Datasources',
    exportSRPFrames: 'Export SRP Frames',
    exportImages: 'Export Images',
    exportPreferences: 'Export Preferences',
    exportFile: 'Export Orgs File',
    browse: 'Browse',
    user: 'User',
    reset: 'reset',
    invite: 'Invite',
    inviteUser: 'Invite User',
    loginUser: 'Login',
    update: 'Update',
    members: 'Member',
    addMember: 'Add member',
    role: 'Role',
    current: 'Current',
    currentOrg: 'Current Org:',
    sessions: 'Sessions',
    lastSeen: 'Last seen',
    loggedOn: 'Logged on',
    ipAddress: 'IP address',
    browserAndOs: 'Browser & OS',
    switchTo: 'Switch to',
    newChannel: 'New channel',
    type: 'Type',
    Type: 'Type',
    management: 'Management',
    permissions: 'Permissions',
    systemConfigure: 'System Configure',
    newLanguage: 'New Language',
    language: 'Language',
    sysLanguage: 'System language',
    edit: 'Edit',
    general: 'General',
    logo: 'Logo',
    title: 'Title',
    icon: 'Icon',
    cancel: 'Cancel',
    sendTest: 'Send Test',
    newDashboard: 'New dashboard',
    newPanel: 'New Panel',
    addQuery: 'Add Query',
    addPanel: 'Add panel',
    to: 'to',
    customTimeRange: 'Custom time range',
    refreshDashboard: 'Refresh dashboard',
    conflict: 'Conflict',
    saveOverwrite: 'Save & Overwrite',
    yes: 'YES',
    no: 'NO',
    dashboardSettings: 'Dashboard settings',
    file: 'File',
    fileProgress: 'Progress',
    close: 'Close',
    overwrite: 'Overwrite',
    error: 'Error',
    uploader: 'Uploader',
    prePage: 'Previous Page',
    nextPage: 'Next Page',
    confirm: 'confirm',
    warn: 'Warn',
    upload: 'Upload',
    path: 'Path',
    orgProfile: 'Organization profile',
    add: 'Add',
    unsavedChanges: 'Unsaved changes',
    doYouSaveYourChanges: 'Do you want to save your changes?',
    discard: 'Discard',
    newPlaylist: 'New Playlist',
    interval: 'Interval',
    addDaashboards: 'Add dashboards',
    starred: 'starred',
    Starred: 'Starred',
    tags: 'Tags',
    view: 'View',
    load: 'Load',
    enable: 'Enable',
    refresh: 'Refresh',
    api: 'Api',
    visible: 'Visible',
    accumulative: 'Accumulative',
    link: 'Link',
    limit: 'Limit',
    last: 'Last',
    main: 'Main',
    right: 'Right',
    left: 'Left',
    defaultLanguage: 'Default Language',
    theme: 'Theme',
    sideMenu: 'Side Menu',
    addPermission: 'Add Permission',
    addPermissionFor: 'Add Permission For',
    style: 'Style',
    links: 'Links',
    variable: 'Variable',
    variables: 'Variables',
    JsonModel: 'Json Model',
    search: 'Search',
    newFolder: 'New folder',
    importDashboard: 'Import dashboard',
    importFolder: 'import Folder',
    target: 'Target',
    folderImportSetting: 'folder Import Setting',
    clear: 'Clear',
    filterBy: 'Filter By',
    filter: 'Filter',
    move: 'Move',
    treeMenu: 'Tree Menu',
    annotations: 'Annotations',
    new: 'New',
    queryName: 'Query name',
    dataSource: 'Data source',
    enabled: 'Enabled',
    hidden: 'Hidden',
    color: 'Color',
    query: 'Query',
    versions: 'Versions',
    notFound: 'Not found',
    saveAs: 'Save As...',
    description: 'Description',
    addTags: 'Add Tags',
    editable: 'Editable',
    deleteDashboard: 'Delete Dashboard',
    all: 'All',
    selected: '选中',
    selectedAll: 'Selected All',
    selectedDefault: 'Selected Default',
    selectedColor: 'Selected Color',
    change: 'change',
    importOverwrite: ' Import (Overwrite)',
    publishedBy: 'Published by',
    options: 'Options',
    importFormDashboard: 'Importing Dashboard from JSON file',
    info: 'Info',
    url: 'Url',
    tooltip: 'Tooltip',
    openInNewTab: 'Open in new tab',
    saveChanges: 'Save Changes',
    savecurrentTimeRange: 'Save current time range',
    version: 'Version',
    date: 'Date',
    updatedBy: 'Updated By',
    notes: 'Notes',
    restore: 'Restore',
    latest: 'Latest',
    comparing: 'Comparing',
    duplicate: 'Duplicate',
    definition: 'Definition',
    option: 'Option',
    label: 'Label',
    hide: 'Hide',
    values: 'Values',
    intervalOptions: 'Interval Options',
    uptate: 'Uptate',
    defaultValue: 'Default value',
    regex: 'Regex',
    sort: 'Sort',
    example: 'Example',
    addOption: 'add Option',
    tags_: 'tags',
    line: 'Line',
    characters: 'characters',
    saving: 'Saving',
    shareDashboard: 'Share dashboard',
    share: 'Share',
    more: 'More...',
    inspect: 'Inspect',
    snapshot: 'Snapshot',
    report: 'Report',
    copy: 'Copy',
    timeout: 'Timeout',
    seconds: 'seconds',
    copyToClipboard: 'Copy to Clipboard',
    enter: 'Enter',
    backToDashboard: 'Back to dashboard',
    resetDashboard: 'reset dashboard',
    axes: 'Axes',
    leftY: 'Left Y',
    rightY: 'Right Y',
    show: 'Show',
    unit: 'Unit',
    scale: 'Scale',
    auto: 'auto',
    decimals: 'Decimals',
    mode: 'Mode',
    align: 'Align',
    level: 'Level',
    legend: 'Legend',
    width: 'Width',
    oddColor: 'Odd Color',
    evenColor: 'Even Color',
    min: 'Min',
    max: 'Max',
    avg: 'Avg',
    total: 'Total',
    from: 'From',
    fromFolder: 'From Source file',
    targetFolder: 'To Target file',
    To: 'To',
    metric: 'Metric',
    URL: 'URL',
    scenario: 'Scenario',
    alias: 'Alias',
    labels: 'Labels',
    newValue: 'New value',
    time: 'Time',
    allValues: 'All values',
    customInterval: 'Custom Interval',
    queries: 'Queries',
    visualization: 'Visualization',
    cards: 'Cards',
    repeating: 'Repeating',
    repeat: 'Repeat',
    adjustableFontSize: 'Adjustable Font Size',
    cardOpacity: 'Card transparency',
    cardOpacityTips: 'The transparency value is between 0.1 and 1, and the smaller the value, the more transparent it is',
    fontWeight: 'Font Weight',
    adjustableFontSizeTip: 'Font size adjust with window size',
    timeConversion: 'timeConversion',
    openTitleUseE: 'You can open the panel title with the shortcut e',
    field: 'Field',
    fontSize: 'Font size',
    prefix: 'Prefix',
    postfix: 'Postfix',
    bold: 'Bold',
    decimalLegendTooltip: 'Override automatic decimal precision for legend and tooltips',
    decimalsTooltip: 'Override automatic decimal precision for axis.',
    coloring: 'Coloring',
    thresholds: 'Thresholds',
    colors: 'Colors',
    invert: 'Invert',
    background: 'Background',
    YMin: 'Y-Min',
    YMax: 'Y-Max',
    lineColor: 'Line Color',
    fillColor: 'Fill Color',
    valueMappings: 'Value Mappings',
    YAxis: 'Y Axis',
    buckets: 'Buckets',
    size: 'size',
    XAxis: 'X Axis',
    dataFormat: 'Data format',
    format: 'Format',
    display: 'Display',
    scheme: 'Scheme',
    space: 'Space',
    round: 'Round',
    histogram: 'Histogram',
    columns: 'Columns',
    order: 'Order',
    addtags: 'add tags',
    titleMargin: 'Title Margin',
    fontColor: 'Font Color',
    backgroundColor: 'Background Color',
    sidebarColor: 'Sidebar Color',
    scrollbarColor: 'Scrollbar Color',
    rule: 'Rule',
    for: 'For',
    timeFor: 'For',
    conditions: 'Conditions',
    notifications: 'Notifications',
    sendto: 'Send to',
    message: 'Message',
    draggable: 'Draggable',
    height: 'Height',
    imgHeight: 'Img Height',
    item: 'item',
    titleColor: 'Title Color',
    valueColor: 'Value Color',
    metrics: 'Metrics',
    logs: 'Logs',
    split: 'Split',
    clearAll: 'Clear All',
    runQuery: 'Run Query',
    gobackEsc: 'Go back (Esc)',
    newName: 'New name',
    copyTags: 'Copy tags',
    recentlyViewed: 'Recently viewed',
    fonts: 'Fonts',
    titleQuery: 'title query',
    maxItems: 'Max items',
    sortOrder: 'Sort order',
    forText: 'for',
    data: 'Data',
    Auto: 'Auto',
    scroll: 'Scroll',
    dateFormat: 'Date format',
    colorMode: 'Color Mode',
    choose: 'Choose',
    base: 'Base',
    addMapping: 'Add mapping',
    dataLinks: 'Data links',
    removePanelText: 'Are you sure you want to remove this panel?',
    embed: 'Embed',
    addName: 'Add Name',
    timeEnd: 'Time End',
    deprecated: 'deprecated',
    groupBy: 'Group by',
    thenBy: 'Then by',
    script: 'Script',
    var: 'var',
    params: 'params',
    model: 'Model',
    window: 'Window',
    service: 'Service',
    subscription: 'Subscription',
    resourceGroup: 'Resource Group',
    namespace: 'Namespace',
    resourceName: 'Resource Name',
    aggregation: 'Aggregation',
    top: 'Top',
    workspace: 'Workspace',
    showHelp: 'Show Help',
    rawQuery: 'Raw Query',
    anonymous: 'Anonymous',
    patterns: `Patterns`,
    resolution: 'Resolution',
    fill: 'Fill',
    filters: 'Filters',
    connection: 'Connection',
    host: 'Host',
    database: 'Database',
    httpMode: 'HTTP Method',
    formatAs: 'FORMAT AS',
    aliasBy: 'ALIAS BY',
    FROM: 'FROM',
    GroupBy: 'GROUP BY',
    orderBy: 'ORDER BY',
    desc: 'DESC',
    Limit: 'LIMIT',
    tz: 'tz',
    note: 'NOTE',
    databaseName: 'database name',
    user_: 'user',
    details: 'details',
    switch: 'Switch',
    filterByNameOrType: 'Filter by name or type',
    testing: 'Testing...',
    unknownPlugin: 'Unknown Plugin',
    disable: 'Disable',
    panel: 'panel',
    datasource: 'datasource',
    log: 'Log',
    Changlog: 'Changelog',
    loading: 'loading',
    folderPermissions: 'Folder Permissions',
    confirmDelete: 'Confirm Delete',
    Enhanced: 'Enhanced',
    ReportUpgrade: 'Report Upgrade',
    Upgrade: 'Upgrade',
    Standard: 'Standard',
    Professional: 'Professional',
    Advanced: 'Advanced',
    ProfessionalShared: 'ProfessionalShared',
    Lite: 'Lite',
    ProfessionalWA: 'Professional-WA',
    CustomizedV1: 'Customized V1',
    number: 'number',
    numbers: 'numbers',
    signature: 'signature',
    signIn: 'Sign In',
    failed: 'Failed',
    doing: 'Doing',
    wait: 'Wait',
    download: 'Download',
    state: 'State',
    success: 'Success',
    timeZone: 'Time zone',
    timeLast: 'Last',
    minute: 'minute',
    hour: 'hour',
    day: 'day',
    month: 'month',
    months: 'months',
    days: 'days',
    hours: 'hours',
    minutes: 'minutes',
    defaultTimeRange: ' Default TimeRange',
    CustomTimeRange: 'Custom TimeRange',
    addTime: 'Add Custom TimeRange',
    margin: 'Margin',
    saveCurrentVariables: 'Save current variables',
    year: 'year',
    second: 'second',
    setValueMappings: 'Set value mappings',
    addValueMapping: 'Add a value mapping',
    setRangeMappings: 'Set range mappings',
    addRangeMapping: 'Add a range mapping',
    panelJson: 'Panel JSON',
    defaultCustom: 'Default Custom',
    timeRangeCustom: 'Time Range Custom',
    millisecond: 'millisecond',
    milliseconds: 'milliseconds',
    productsComparison: 'Version Comparison',
    superiorPlugins: 'Superior Plugins',
    subscribe: 'Subscribe',
    pointSize: 'Point Size',
    loginNamePlaceHolder: 'email or username',
    standardLogin: 'Standard',
    LDAPusername: 'LDAP username',
    emailTip: 'Please enter you email',
    pwdTip: 'Please enter your password',
    incorrectTip: 'The email or password is incorrect',
    loginDesc: 'Log in to Dashboard',
    loginCloudDesc: 'Log in to Cloud Dashboard',
    alarm: 'Alarm',
    audio: 'Audio',
    position: 'Position',
    yearPrefix: 'Year As Prefix',
    alarmSource: 'Alarm Source',
    alarmType: 'Alarm Type',
    activate: 'Activate',
    activatePage: 'Activate And Reload This Page',
    preview: 'Preview',
    fixedFontSize: 'Font Size',
    activateSuccess: 'Activate Success',
    activateFail: 'Activate Fail',
    activated: 'Activated',
    orgInitManagement: 'Org Init',
    uploadFile: 'Upload File',
    deleteSuccess: 'Delete Success',
    deleteFail: 'Delete Fail',
    previewLoginPage: 'Preview Login Page',
    previewMmanufacturerIcon: 'Preview Mmanufacturer Icon',
    noFileFound: 'No File Found',
    noFileMatch: 'No File Match',
    overwriteSameName: 'Overwrite Same Name',
    synchronousOrgs: 'Synchronous Orgs',
    importToOrg: 'Import To Orgs',
    sureToOverwriteSameFile: 'Sure To Overwrite Files With The Same Name?',
    jump: 'Jump',
    findFileByName: 'Find Files By Name',
    orgInitImport: 'Org Init Import',
    orgInitImportDesc: 'Import the dashboard, datasources, SRP Frames, images, and preferences from the system Org initialization into this newly created organization',
    currentOrgExport: 'Export Current Org',
    currentOrgImport: 'Import Current Org',
    importOrg: '--Please Select--',
    exportCurrentOrgFile: 'Export Current Org File',
    orgsExportDes: 'This is a system level organization export. Please select the organization to export.',
    orgsImportDes: 'This is a system level organization import. Please upload the file for import.',
    widthAdjust: 'Width Adjust',
    week: 'week',
    weeks: 'weeks',
    nameCol: 'Name Column',
    valueCol: 'Value Column',
    enoughPanels: 'The maximum number of panels has been reached',
  },

  expore: {
    dedup: 'Dedup',
    noDedup: 'No de-duplication',
    noDedupExact: 'De-duplication of successive lines that are identical, ignoring ISO datetimes.',
    noDedupNumbers:
      'De-duplication of successive lines that are identical when ignoring numbers, e.g., IP addresses, latencies.',
    noDedupSignature: 'De-duplication of successive lines that have identical punctuation and whitespace.',
    noLogs: 'No logs found.',
    scanOlderLog: 'Scan for older logs',
    stopScan: 'Stop scan',
    editModeBtn: 'Edit mode button',
  },

  time: {
    now: 'Now',
    timeOptions: 'Time Options',
    autoRefresh: 'Auto-refresh',
    nowDelayNow: 'Now delay now-',
    hidetimePicker: 'Hide time picker',
    hidetimeRange: 'Hide time range',
    hideCustomRange: 'Hide custom range',
    hideRefreshing: 'Hide refreshing',
    configQuickRanges: 'Config QuickRange',
    last5minutes: 'Last 5 minutes',
    last15minutes: 'Last 15 minutes',
    last30minutes: 'Last 30 minutes',
    last1hour: 'Last 1 hour',
    last3hour: 'Last 3 hours',
    last6hour: 'Last 6 hours',
    last12hour: 'Last 12 hours',
    last24hour: 'Last 24 hours',
    last2days: 'Last 2 days',
    last7days: 'Last 7 days',
    last30days: 'Last 30 days',
    last90days: 'Last 90 days',
    last6months: 'Last 6 months',
    last1year: 'Last 1 year',
    last2year: 'Last 2 years',
    last5year: 'Last 5 years',
    yesterday: 'Yesterday',
    daybeforeyesterday: 'Day before yesterday',
    thisdaylastweek: 'This day last week',
    previousweek: 'Previous week',
    previousmonth: 'Previous month',
    previousyear: 'Previous year',
    today: 'Today',
    todaysofar: 'Today so far',
    thisweek: 'This week',
    thisweeksofar: 'This week so far',
    thismonth: 'This month',
    thismonthsofar: 'This month so far',
    thisyear: 'This year',
    thisyearsofar: 'This year so far',
    customTimeFormat: 'Custom time format',
    yesterday8hTotoday8h: 'Yest 8:00 to today 8:00'
  },

  panelGeneral: {
    queryResult: 'Query results',
    addQuery: 'Add Query',
    addExpression: 'Add Expression',
    queryInspector: 'Query Inspector',
    querySetLabels: 'Set labels using a key=value syntax:',
    stringInput: 'String Input',
    customIntervalTip: `The default is empty according to the display area adjustment, Custom Interval can support custom data query
        interval(unit supports ms,s,m,h,d,w,M,y, the number can be customized), for example 1ms,2s,3m,4h,5d,6w,7M,8y...`,
    relativeTime: 'Relative time',
    hideTimeInfo: 'Hide time info',
    timeShift: 'Time shift',
    notValid: 'Not a valid timespan',
    cacheTimeout: 'Cache timeout',
    cacheTimeoutTip: `If your time series store has a query cache this option can override the default cache timeout. Specify a
            numeric value in seconds.`,
    panelTransparent: 'Panel Transparent',
    SelfAdaption: 'Self Adaption',
    descriptionPlaceholder: 'Panel description, supports markdown & links',
    maxPerRow: 'Max per row',
    repeatNote: 'Note: You may need to change the variable selection to see this in action.',
    panelTitleStyle: 'Panel Title Style',
    hidePanelTitle: 'Hide Panel Title',
    panelMarginTip: 'Please enter a number as the width of the border',
    panelTitleScheme: 'Panel Title Scheme',
    predefinedStyles: 'Predefined Styles',
    fontGradient: 'Font Gradient',
    startGradientColor: 'Start Gradient Color',
    endGradientColor: 'End Gradient Color',
    pillarColor: 'Pillar Color',
    panelLinks: 'Panel Links',
    noAlertInfo: 'Panel has no alert rule defined',
    createAlert: 'Create Alert',
    stateHistory: 'State history',
    deleteAlert: 'Delete Alert',
    deleteAlertTip1: 'Are you sure you want to delete this alert rule?',
    deleteAlertTip2: 'You need to save dashboard for the delete to take effect',
    testRule: 'Test Rule',
    backQueries: 'Go back to Queries',
    notSupportedAlert: 'Transformations are not supported in alert queries',
    noStateChange: 'No state changes recorded',
    collapseAll: 'Collapse All',
    expandAll: 'Expand All',
    evaluatingRule: 'Evaluating rule',
    copyToClipboard: 'Copy to Clipboard',
    deleteAlertHistory: 'Delete Alert History',
    deleteAlertHistoryText: 'Are you sure you want to remove all history & annotations for this alert?',
    clearHistory: 'Clear history',
    last50Change: 'Last 50 state changes',
    evaluateEvery: 'Evaluate every',
    forTip: `If an alert rule has a configured For and the query violates the configured threshold it
        will first go from OK to Pending.Going from OK to Pending Grafana will not send any notifications.
        Once the alert rule has been firing for more than For duration,
        it will change to Alerting and send alert notifications.`,
    noData: 'No Data & Error Handling',
    allNull: 'If no data or all values are null',
    setStateTo: 'SET STATE TO',
    stateError: 'If execution error or timeout',
    newTagName: 'New tag name...',
    newTagVal: 'New tag value...',
    addTag: 'Add Tag',
    addCard: 'Add Card',
    noCardTitle: 'Panel has no card rule defined',
    deleteCard: 'Delete Card',
    sureDeleteCard: 'Are you sure you want to delete this card?',
    dataTag: 'Data Tag',
    dataShow: 'Data Show',
    imgUrl: 'Img Url',
    addCardItem: 'Add Card Item',
    toggleTextEditMode: `Toggle text edit mode`,
    PanleBackground: 'Panle Background',
    BackgroundImage: 'Background Image',
    HorizontalPadding: 'Panel Horizontal Padding',
    tip1: 'Please enter a number as the horizontal padding of the panel',
    VerticalPadding: 'Panel Vertical Padding',
    tip2: 'Please enter a number as the vertical padding of the panel',
    TopPadding: 'Title Top Padding',
    tip3: 'Please enter a number as the top padding of the title',
    customTimeRange: 'Custom TimeRange',
    defaultTimeRange: 'Default TimeRange',
    addCustomTimeRange: 'Add Custom TimeRange',
    minute: 'Minute',
    hour: 'Hour',
    day: 'Day',
    month: 'Month',
    tableView: 'Table View',
    PanelTimeRefresh: 'Panel Time Refresh',
    PanelTime: 'Panel Time',
    PanelRefresh: 'Panel Refresh',
    PanelTimeShow: 'Panel Time Show',
    PanelRefreshShow: 'Panel Refresh Show',
    PanelTimeColor: 'Panel Time Color',
    PanelRefreshColor: 'Panel Refresh Color',
    PanelRefreshTextColor: 'Panel Refresh Text Color',
    PanelTimeTextColor: 'Panel Time Text Color',
    PanelBgColor: "Panel Background Color",
    valueCol: 'Value Column',
    value: 'Value',
    metricItem: 'Metric Item',
    panelTimeVariable: 'Panel Time Related Variables',
    PanelTimeRange: 'Time Range Before And After',
  },

  permissions: {
    isPermissions: 'What are Permissions?',
    dashPermissions: `An Access Control List (ACL) model is used to limit access to Dashboard Folders. A user or a Team can be
            assigned permissions for a folder or for a single dashboard.`,
    loadPermissions: 'Loading permissions...',
    noPersssions: 'No permissions are set. Will only be accessible by admins.',
    JsonModelDes: `The JSON Model below is data structure that defines the dashboard. Including settings, panel settings & layout,
            queries etc.`,
    haveChanged: 'You have changed folder, please save to view permissions.',
    settingsView: 'Settings view not found',
    settingPageNotFound: 'The settings page could not be found or you do not have permission to access it',
    makeEditable: 'Make Editable',
    defaultPer: 'Default Permission',
    viewEvery: 'Everyone With Viewer Role',
    editEvery: 'Everyone With Editor Role',
    canViewDash: 'Can view dashboards.',
    canEditDash: 'Can add, edit and delete dashboards.',
    canAdminDash: 'Can add/remove permissions and can add, edit and delete dashboards.',
  },

  variables: {
    onDashLoad: 'On Dashboard Load',
    onTimeChange: 'On Time Range Change',
    refreshButEnabled: 'Refresh button enabled',
    optionalDisplayName: 'optional display name',
    autoOption: 'Auto Option',
    varEmptyTitle: 'There are no variables yet',
    addVariable: 'Add variable',
    varEmptyInfo: ` <p>
            Variables enable more interactive and dynamic dashboards. Instead of hard-coding things like server or
            sensor names in your metric queries you can use variables in their place. Variables are shown as dropdown
            select boxes at the top of the dashboard. These dropdowns make it easy to change the data being displayed in
            your dashboard. Check out the
            <a class="external-link" href="http://docs.grafana.org/reference/templating/" target="_blank">
                Templating documentation
            </a>
            for more information.
            </p>`,
    varDo: 'What do variables do?',
    stepcount: 'Step count',
    stepcountTip: 'How many times should the current time range be divided to calculate the value',
    minInterval: 'Min interval',
    minIntervalTip: 'The calculated value will not go below this threshold',
    valComma: 'Values separated by comma',
    selectionOptions: 'Selection Options',
    multiValue: 'Multi-value',
    multiValueTip: 'Enables multiple values to be selected at the same time',
    includeAlloption: 'Include All option',
    previewofvalues: 'Preview of values',
    constantOptions: 'Constant options',
    customOptionsTip: 'your metric prefix',
    customTypeDes: 'Define variable values manually',
    textOptions: 'Text options',
    customOptions: 'Custom Options',
    defaultVal: 'default value, if any',
    queryOptions: 'Query Options',
    variableUptateText: 'When to update the values of this variable.',
    queryPlaceholder: 'metric name or tags query',
    regexPlaceholder: 'Optional, if you want to extract part of a series name or metric node segment.',
    sortPlaceholder: 'How to sort the values of this variable.',
    dataOptions: 'Data source options',
    instanceNameFilter: 'Instance name filter',
    instanceNameFilterTip:
      'Regex filter for which data source instances to choose from in the variable value dropdown. Leave empty for all.',
    dependentOptions: 'Dependent Options',
    dependentVar: 'Dependent Variable',
    variableItem: 'Variable Item',
    variableText: 'Variable text',
    variableVal: 'Variable value',
    queryDes: 'Variable values are fetched from a datasource query',
    queryValueGroup: 'Value groups/tags (Experimental feature)',
    tagsQuery: 'Tags query',
    tagValsQuery: 'Tag values query',
    customAllVal: 'Custom all value',
    metricNameOrTag: 'metric name or tags query',
    showMore: 'Show more',
    defineTime: 'Define a timespan interval (ex 1m, 1h, 1d)',
    datasourceTip: 'Enabled you to dynamically switch the datasource for multiple panels',
    constantTip: 'Define a hidden constant variable, useful for metric prefixes in dashboards you want to share',
    adhocTip: 'Add key/value filters on the fly',
    textboxTip: 'Define a textbox variable, where users can enter any arbitrary string',
    defineVarTip: 'Define variable values manually',
    all: 'All',
    importVariables: 'Import Variables',
    selectFile: 'please select xxx.xlsx file.',
    orgOverwriteInfo:
      'The following variables is duplicated with the existing variables on the current page. Please choose whether to overwrite it',
    fixDefaultValue: 'Fixed Default Value',
  },

  serverAdmin: {
    userSearchPlaceholder: 'Find user by name/login/email',
    seenTip: 'Time since user was seen using Grafana',
    newOrgDes:
      'Each organization contains their own dashboards, data sources and configuration, and cannot be shared between orgs. While users may belong to more than one, multiple organization are most frequently used in multi-tenant deployments.',
    settingDes:
      'When the configuration is complete, please click the refresh button on the right side. The configuration takes effect.',
    totalDashboards: 'Total dashboards',
    totalUsers: 'total Users',
    activeUsers: 'Active users (seen last 30 days)',
    activeAdmins: 'Active admins (seen last 30 days)',
    activeEditors: 'Active editors (seen last 30 days)',
    activeViewers: 'Active viewers (seen last 30 days)',
    activeSessions: 'Active sessions',
    totalOrgs: 'Total orgs',
    totalDatasources: 'Total datasources',
    totalPlaylists: 'Total playlists',
    totalSnapshots: 'Total snapshots',
    totalDashboardTags: 'Total dashboard tags',
    totalStarredDashboards: 'Total starred dashboards',
    totalAlerts: 'Total alerts',
    totalAdmins: 'Total admins',
    totalEditors: 'Total editors',
    totalViewers: 'Total viewers',
    selectOrg: 'Please select export orgs',
    exportOrgFile: 'Export Orgs File',
    startImport: 'Start Import',
    importOverwrite: 'Import (Overwrite)',
    orgOverwriteInfo: 'The following content is duplicated in the current org, please choose whether to overwrite!',
    appOverwriteInfo: 'The following content is duplicated in the current App, please choose whether to overwrite!',
    startImportOrgInfo: 'Start importing data into the specified org.',
    startImportStruInfo: 'Start importing data into the same structure.',
    systemAdmin: 'System Admin',
    logoutAllDevices: 'Logout user from all devices',
    userStatus: 'User status',
    editOrg: 'Edit Organization',
    orgUser: 'Organization Users',
    restartAppInfo: 'configuration changed,please restart the app service',
    orgSearchPlaceholder: 'Find org by name',
  },

  dashGeneral: {
    deleteDashProTitle: 'Cannot delete provisioned dashboard',
    deleteDashProText1: `This dashboard is managed by Grafanas provisioning and cannot be deleted. Remove the dashboard from the
        config file to delete it.`,
    deleteDashProText2: `<i>See <a class="external-link" href="http://docs.grafana.org/administration/provisioning/#dashboards" target="_blank">
        documentation</a> for more information about provisioning.</i>
        </br>
        File path:`,
    deleteDashText: 'Do you want to delete this dashboard?',
    deleteDashText2: `This dashboard contains {alerts} alerts. Deleting this dashboard will also delete those alerts`,
    dashHasDeleted: 'Dashboard Deleted',
    hasDeletedText: '{title} has been deleted',
    tagInfo: 'Press enter to add a tag',
    refreshInView: 'Refresh In View',
    editableTip: 'Uncheck, then save and reload to disable all dashboard editing',
    mobileOptions: 'Mobile Options',
    panelOptions: 'Panel Options',
    graphUseTip: 'Cycle between options using Shortcut: CTRL+O or CMD+O',
    graphTip: 'Graph Tooltip',
    rowToGroup: 'Row To Group',
    rowToGroupTip: 'Row panels are automatically generated into groups on the mobile page',
    gridColumnLevel: 'Grid Column Level',
    gridColumnLevelTip:
      'If you switch from high level to low level, you need to save the configuration and reload the page',
  },

  srpFrame: {
    findSrpPlaceholder: 'Find SRP Frame by name',
    noSrpFrameInfo: 'No SRP Frame matching your query were found.',
    noSrpFrameFound: 'No SRP-Frame found.',
    srpHasSameName: 'A SRP Frame with the same name already exists.',
    deleteSrpText: 'Do you want to delete the selected frame and all its configurations',
    deleteSrpsText: 'Do you want to delete the selected frames and all its configurations',
    manageSrpSubTitle: 'Manage SRP-Frames & Permissions',
    langManList: 'Language Management List',
    nosrpLangInfo: `<div>You haven't added any language configuration yet.</div>`,
    situationRoom: 'Situation Room Preview',
    singleDisplay: 'Single Display Preview',
    titleDes: 'Title Description',
    logoLink: 'Logo Link in left',
    powerLink: 'Logo link in right ',
    menuList: 'Menu List',
    marquee: 'Marquee',
    notice: 'Notice',
    alarmDialog: 'Alarm Dialog',
    showTime: 'Show Time',
    addAudio: 'Add Audio Config',
    showTimeTip: 'The alarm dialog disappears after long and is displayed by default',
    enableMulti: 'Enabling Multiple Alarms',
    dispaly55: '1 Piece War Room',
    situation: '3 Piece War Room',
    deleteMenuTitle: 'Delete Menu List',
    deleteMenuText: 'Are you sure you want to delete this list?',
    autoplay: 'Autoplay',
    autoPlayIterval: 'Autoplay Interval',
    autoPlayUrl: 'Autoplay Url',
    newFirstMenu: 'New First Layer Menu',
    noMenuListInfo: `You haven't added menu list yet.`,
    autoplayTip: `When update autoplay time,Unit has s/m/h/d and never.`,
    fontColorTips: 'Menu bar text color',
    selectColorTips: 'Select text color in the menu bar',
    selectedBgColor: "Menu bar background color",
    bgColorTips: 'Menu bar background color',
    scrollColorTTips: 'Menu bar scroll bar color',
    ScrollBorder: 'Hide scrollbar borders',
    ScrollBorderTips: 'Hide scrollbar border, turn on to hide scrollbar border lines',
    sidebarColorTips: 'Right border color of menu bar',
    menHoverTips: 'Menu bar hover color',
    menuBgImgTips: 'Menu bar hover background image',
    menuListImgTips: 'Menu bar background image',
    menuSideTips: 'Picture of the right border of the menu bar',
    menuIconOpenTips: 'Menu Open Icon',
    menuIconCloseTips: 'Menu Icon Close',
    menuIconWidthTips: 'The width of the icon when the menu is opened, measured in px',
    menuIconHeightTips: 'The height of the closed icon in the menu bar, measured in px',
    titleShow: 'The panel supports modification operations. If you need to support modification in SRP, you need to open it',
    addMenulist: 'Add Menu Item',
    editMenulist: 'Edit Menu Item',
    refreshMarquee: `When update the value of this marquee,Unit has s/m/h/d and never.`,
    refreshAlertNoticeTip: `When update the refresh time, Units has s/m/h/d and never.`,
    authType: 'Auth Type',
    headerKey: 'Header Set',
    ssoUrl: 'Sso Url',
    alertName: 'Alert Name',
    alertTimeRange: 'Alert Time Range',
    allAsRead: 'Mark All As Read',
    linkEnable: 'Link Enable',
    rightTitle: 'Right Title',
    rightUrl: 'Right Url',
    bottomUrl: 'Bottom Url',
    titleDisplay: 'Title Display',
    mainPageTip: 'The main page corresponds to the content of the menulist.',
    dashboardView: 'Dashboard View',
    closeToHome: 'Close Jump to homepage',
    heightAdjust: 'Height Adjust',
    dashboardHeader: 'Dashboard Header',
    dashboardHeaderAll: 'Dashboard Header All Checked',
    userVisible: 'User Visible',
    userIconVisible: 'User Icon Visible',
    collapseSidemenu: 'Collapse Sidemenu',
    expandSubmenu: 'Expand Submenu',
    expandlevel: 'Expand level',
    sideWidth: 'Side Width',
    sideDrag: 'Side Draggable',
    srpFramesPermissions: 'SRP Frames Permissions',
    srpFramePerTip: `What are Permissions?<br>An Access Control List (ACL) model is used to limit access to SRP Frames.<br/>A user or a team can be assigned permissions for SRP Frames.`,
    srpSetting: 'SRP Frame Settings',
    srpNameExistInfo: 'A SRP Frame with the same name already exists',
    deleteSrpInfo: `Do you want to delete the {srpName} and all its configurations?`,
    deleteLanguage: 'Delete language',
    deleteLanguageInfo: 'Are you sure you want to delete this language?',
    selectUser: 'Select a user',
    ViewallEvent: 'View all Event',
    Markallasread: 'Mark all as read',
    MenuLogobackColor: 'Menu Logo backColor',
    AudioFrequency: 'Audio Frequency',
    LogoutUrl: 'Logout Url',
    expandedShow: 'Show Expand',
    expandedShowTip:
      'The configuration is open to closed, the Dashboard and URL configured in the first-level title will be deleted',
    titleFontSize: 'Title Font Size',
    subTitleFontSize: 'Subtitle Font Size',
    menuHeight: 'SRP Menu Height',
    threeTitleFontSize: 'Three title Font Size',
    menuColor: 'Menu color',
    gradualShow: 'Gradual Show',
    gradualStartColor: 'Start Color',
    gradualEndColor: 'End Color',
    tipsColor: 'Tips Color',
    tipsShow: 'Tips Show',
    searchInputShow: 'Search Show',
    menuBgImg: 'menu Bg Img',
    menuListBgImg: 'menu List Bg Img',
    menuSideBg: 'menu Side Bg Img',
    menuIconOpen: 'menu Icon Open',
    menuIconClose: 'menu Icon Close',
    menuIconWidth: 'menu Icon Width',
    menuIconHeight: 'menu Icon Height',
    PanelTitleShow: 'Panel Title Show',
    fontSizeTip: 'Font units ending in px or vw',
    teamSelected: 'Team Selected',
    clickClose: 'Click Close',
    expanded: 'Expanded',
    menuPermission: 'Menu Permission',
    srpVariables: 'SRP Variables',
    bgImg: 'Background Img',
    addBackSetting: 'Add Back setting',
    backTitle: 'Back Title',
    backUrl: 'Back Url',
    backParameter: 'Back Parameter',
  },

  configuration: {
    /* Datasources */
    datasourceEmptyTitle: 'There are no data sources defined yet',
    datasourceProTip: 'You can also define data sources through configuration files.',
    datasourceProTipLinkTitle: 'Learn more',
    proTip: 'ProTip',
    tsdb: 'Time series databases',
    logging: 'Logging& document databases',
    cloud: 'Cloud',
    otherType: 'other',
    saveDatasource: 'Save and Test button',
    url: 'URL',
    access: 'Access',
    line1Entry: 'Access mode controls how requests to the data source will be handled.',
    line2Entry: 'should be the preferred way if nothing else stated.',
    line3Entry: 'Proxy access mode (Default):',
    line4Entry: `All requests will be made from the browser to Grafana backend/server which in turn will forward
        the requests to the data source and by that circumvent possible Cross-Origin Resource Sharing (CORS) requirements.
        The URL needs to be accessible from the grafana backend/server if you select this access mode.`,
    line5Entry: 'Direct access mode:',
    line6Entry: `All requests will be made from the browser directly to the data source and may be subject to Cross-Origin Resource
        Sharing (CORS) requirements. The URL needs to be accessible from the browser if you select this access mode.`,
    server: 'Server',
    defaultDatasource: 'Default',
    defaultDatasourceTip:
      'The name is used when you select the data source in panels. The Default data source is preselected in new panels.',
    leftEntry: 'Your access method is',
    direct: 'Direct',
    proxy: 'Proxy',
    directRight: 'this means the URL needs to be accessible from the browser.',
    proxyRight: ' this means the URL needs to be accessible from the grafana backend/server.',
    specialTip: 'Specify a complete HTTP URL (for example http://your_server:8080)',
    ssoUrl: 'Assign SSO Url',
    ssoTip: `When the url domain name is different from the sso domain name,whether to use the sso domain name as the url domain name?
        For example,when it is https://xxxxxx.trial.hz.wise-paas.com.cn,  you can configure https://api-sso-ensaas.hz.wise-paas.com.cn as the sso url,
        or when it is the internal url,you can use the sso url corresponding to the internal url.`,
    ssoTipData: 'Please configure the sso address.For example https://api-sso-ensaas.hz.wise-paas.com.cn.',
    ssoUrlData: 'SSO URL',
    auth: 'Auth',
    basicAuth: 'Basic auth',
    AdvancedList: 'Configuration',
    AdvancedLabel: 'Key',
    AdvancedValue: 'Value',
    withCredentials: 'With Credentials',
    credentialsTip: 'Whether credentials such as cookies or auth headers should be sent with cross-site requests.',
    anonymous: 'Anonymous',
    basicAuthDetails: 'Basic Auth Details',
    advancedHttp: 'Advanced HTTP Settings',
    advancedTip:
      'Grafana Proxy deletes forwarded cookies by default. Specify cookies by name that should be forwarded to the data source.',
    whitelistedCookies: 'Cookies',
    caCert: 'With CA Cert',
    tlsAuth: 'TLS Client Auth',
    tlsTip: 'Needed for verifying self-signed TLS Certs',
    skipTLS: 'Skip TLS Verify',
    allowCleartextPasswords: 'Allow Cleartext Passwords',
    oAuth: 'Forward OAuth Identity',
    oAuthTip: 'Forward the users upstream OAuth identity to the data source (Their access token gets passed along).',
    tslAuthDetial: 'TLS Auth Details',
    tslContent: 'TLS Certs are encrypted and stored in the Grafana database.',
    caCertContent: 'CA Cert',
    clientCert: 'Client Cert',
    clientKey: 'Client Key',
    beginCre: 'Begins with -----BEGIN CERTIFICATE-----',
    beginKey: 'Begins with -----BEGIN RSA PRIVATE KEY-----',
    handlError: 'Data query error handling',
    keepLebal: 'Keep the last correct data',
    chooseDataSourceType: 'Choose a data source type',
    wantDelete: 'Are you sure you want to delete this data source?',
    dupQuery: 'Duplicate query',
    disAndEn: 'Disable/enable query',
    removeQuery: 'Remove query',
    undefinedError: 'Undefined Error',
    HTTPError: 'HTTP Error ',
    HTTPErrorStatus: 'HTTP Error Status ',
    /*Users*/
    pendInvite: 'Pending Invites',
    sendInvite: 'Send invite or add existing Grafana user to the organization',
    inviteEntry: 'Please invite or add a new user to the organization',
    deleteUser: 'Are you sure you want to delete user',
    /*Teams*/
    noHaveTeam: `You haven't created any teams yet`,
    teamProTip: 'Assign folder and dashboard permissions to teams instead of users to ease administration.',
    searchTeams: 'Search teams',
    newTeam: 'New Team',
    teamTip: 'This is optional and is primarily used for allowing custom team avatars.',
    teamSetting: 'Team Settings',
    addTeamMember: 'Add team member',
    addToTeam: 'Add to team',
    searchMember: 'Search members',
    subTitle: 'Manage members & settings',
    selectTeam: 'Select a team',
    noTeam: 'No teams found',
    /*Plugins*/
    findMore: 'Find more plugins on Grafana.com',
    mpTip: 'Some plugins not registered,please restart dashboard app on Management Portal',
    grafanaTip: 'Some plugins not registered, please restart grafana-server.exe',
    uploadTime: 'Upload Time',
    isRegister: 'IsRegister',
    pluginTip: 'The file you uploaded is being stored',
    regPlugin: 'Plugin Upload & Register',
    fileName: 'Plugin FileName',
    deleteText: 'Are you sure to delete {name} plugin ?',
    deleteText2: 'If it deleted, the relevant dashboard will error !',
    selectZip: 'Please  select  plugin  file (.zip)',
    errorType: 'Incorrect file type,  Please select .zip file',
    fileSize: 'Please upload file within 15M',
    pluginUpload: 'Plugin Upload',
    findCatalog: 'Find more plugins on WISE-PaaS Catalog',
    purchasedPlugins: 'Purchased Plugins',
    customPlugin: 'Custom Plugins',
    /*Images */
    imageUpload: 'Image Upload',
    imageType: 'Upload type error,please upload bmp, jpg, jpeg, png, gif, svg type.',
    picSize: 'Please upload pictures within 10M',
    imageName: 'Image Name',
    copySuccess: 'copy success',
    clickMes: 'Please click browser button',
    toPage: 'to ',
    totalPage: 'total',
    page: 'page',
    imageNameSame: 'image name same,is upload?',
    deleteConf: 'Are you sure you want to delete this picture?',
    copyDefeated: 'copy defeated',
    copyTip: 'Please copy the image path',
    fileProgress: 'Upload Progress',
    /* APIKey */
    newAPiKey: 'New Api Key',
    apiTip: 'You have not added any API Keys yet.',
    apiProTip: 'Remember you can provide view-only API access to other applications.',
    addAPiKey: 'Add API Key',
    keyName: 'Key name',
    tooltipText:
      'The api key life duration. For example 1d if your key is going to last for one day. All the supported units are: s,m,h,d,w,M,y',
    liveTime: 'Time to live',
    apiKeyCreated: 'API Key Created',
    key: 'Key',
    keyMas1:
      'You will only be able to view this key here once! It is not stored in this form. So be sure to copy it now.',
    keyMas2: 'You can authenticate request using the Authorization HTTP header, example:',
    existKey: 'Existing Keys',
    keyExpires: 'Expires',
    /*Org Settings */
    configTip: 'Please set the current org related configuration below.',
    sysTip:
      'System anonymous is not enabled, please contact the system administrator to open it in the settings of server admin',
    orgAnno: 'org.anonymous',
    WeChat: 'We Chat',
    Sms: 'Sms',
    Smtp: 'Smtp',
    WechatHost: 'Host',
    User: 'User',
    Password: 'Password',
    FromAddress: 'From Address',
    FromName: 'From Name',
    SkipVerify: 'Skip Verify',
    CertFile: 'Cert File',
    KeyFile: 'Key File',
    orgRole: 'org_role',
    configChange: 'Config changes',
    Enhanced: 'Enhanced',
    Upgrade: 'Upgrade',
    Standard: 'Standard',
    Professional: 'Professional',
    Advanced: 'Advanced',
    ProfessionalShared: 'Professional Shared',
    localbrowsertime: 'Local browser time',
  },

  reporting: {
    reporting: 'reporting',
    reports: 'Reports',
    tasks: 'Tasks',
    newReport: 'New Report',
    editReport: 'Edit Report',
    taskName: 'Task Name',
    reportTitle: 'Report title',
    schedule: 'Schedule',
    selectedSchedule: 'Schedule',
    scheduling: 'Scheduling',
    once: 'Once',
    deleteTask: 'Do you want to delete the task?',
    editInfo: 'edit task,go to pdf list,schedule tasks can be suspended and immediately tasks can be re executed',
    filterByName: 'Filter by task name',
    deleteFile: 'Do you want to delete the file?',
    deleteFiles: 'Do you want to delete the files?',
    fileName: 'File Name',
    reportBranding: 'Report branding',
    companyLogo: 'Company logo Url',
    docFooterInfo: `The logo will be displayed in the document footer.Supported formats:jpg,jpeg,bmp,png.</br>
            png format needs to be spliced at the end of url fmt=png.`,
    emailBranding: 'Email branding',
    footerLinkText: 'Footer link text',
    footerLinkUrl: 'Footer link Url',
    sourceDash: 'Source dashboard',
    sendEmail: 'Send Email',
    recipients: 'Recipients',
    multiEmail: 'You can enter multiple email addresses using a ";" separator',
    timeRangeInfo:
      'Specify the time range of the data query in the report, the default display is the time range set in the dashboard',
    frequency: 'Frequency',
    taskType: 'Task Type',
    taskInfo:
      'If the panel cannot be exported to PDF, the panel position is displayed as blank; if the panel cannot be exported to EXCEL, EXCEL does not contain the data of this panel',
    layout: 'Layout',
    pdfStyle: 'PDF Styling',
    simpleGird:
      'Simple-Shows one panel per row on the page.Grid-Shows panels in the positions they apperar on the dashboard.',
    simple: 'Simple',
    gird: 'Gird',
    messageInfo:
      'Please check your report in the attachment. If you find any issues, please visit Dashboard service to check.',
    monthly: 'Monthly',
    weekly: 'Weekly',
    daily: 'Daily',
    hourly: 'Hourly',
    immediately: 'Immediately',
    delayTime: 'Delay time',
    signleTaskMaxWaitTime: 'Maximum wait time',
    deleteType: 'Are you sure to delete all files under selected type?',
    deleteTypeAndFile: 'Are you sure to delete the selected types and files?',
    deleteTypeDesc: 'All files under the selected types will be deleted',
  },

  navTreeConfig: {
    createFolderSubTitle: 'Create a new folder to organize your dashboards',
    createImportSubTitle: 'Import dashboard from file or Grafana.com',
    srpSubTitle: 'Manage SRP Frames',
    dashboardsSubTitle: 'Manage dashboards & folders',
    exploreSubTitle: 'Explore your data',
    alertingSubTitle: 'Alert rules & notifications',
    reportingSubTitle: 'Create and manage PDF & EXCEL reports',
    configurationSubTitle: 'Organization: ',
    datasourcesDes: 'Add and configure data sources',
    usersDes: 'Manage org members',
    teamsDes: 'Manage org groups',
    pluginsDes: 'View and configure plugins',
    imagesDes: 'View and configure images',
    orgSettingDes: 'Organization preferences',
    apikeysDes: 'Create & manage API keys',
    currentOrgSettingsDes: 'Current Org Setting',
    serverAdminSubTitle: 'Manage all users & orgs',
    keyboardShortcuts: 'Keyboard shortcuts',
    superiorPluginsSubTitle: 'Superior plugins show',
  },
  help: {
    ShortcutsTotal: 'Shortcuts',
    mod: 'mod',
    modDesc: ' CTRL on windows or linux and CMD key on Mac',
    globalEntry: 'Global',
    focusedPanel: 'Focused Panel',
    goHomeDashboard: 'Go to Home Dashboard',
    goProfile: 'Go to Profile',
    openSearch: 'Open search',
    ExitEntry: 'Exit edit/setting views',
    refreshAllPanel: 'Refresh all panels',
    dashboardSettings: 'Dashboard settings',
    toggleEntry: 'Toggle in-active / view mode',
    kioskMode: 'Toggle kiosk mode (hides top nav)',
    expandAllRows: 'Expand all rows',
    collapse: 'Collapse all rows',
    autoFix: 'Toggle auto fit panels (experimental feature)',
    toggleGraph: 'Toggle shared graph crosshair',
    togglePanelsLegend: 'Toggle all panel legends',
    togglePanelEditView: 'Toggle panel edit view',
    togglePanleFullscreen: 'Toggle panel fullscreen view',
    openPanelShareModal: 'Open Panel Share Modal',
    togglePanelLegend: 'Toggle panel legend',
    zoomOutTimeRange: 'Zoom out time range',
    moveTimeBack: 'Move time range back',
    moveTimeForward: 'Move time range forward',
  },
  comparison: {
    function: 'Functions',
    professional: 'Professional',
    standard: 'Standard',
    standardEdge: 'Standard-Edge',
    professionalEdge: 'Professional-Edge',
    advanced: 'Advanced\n(WebAccess)',
    professionalWA: 'Professional-WA\n(WebAccess)',
    enhanced: 'Enhanced\n(iFactory)',
    lite: 'Lite\n(iFactory)',
    professionalDesc: 'Professional Dashboard',
    standardDesc: 'Standard Dashboard',
    standardEdgeDesc: 'Dahboard Standard Edition integrated with IoT Edge',
    professionalEdgeDesc: 'Dashboard Professional Edition integrated with IoT Edge',
    advancedDesc: 'Dashboard Advanced Edition integrated with WebAccess',
    professionalWADesc: 'Dashboard Professional Edition integrated with WebAccess',
    enhancedDesc: 'Enhanced dashboard integrated with ifactory',
    liteDesc: 'Lightweight dashboard integrated with ifactory',
    dashboardManage: 'Dashboard creation and management',
    datasourceManage: 'Data source creation and management',
    alertNotification: 'Alert&Notification&Annotation',
    userManage: 'User/Team management',
    innerPanel: 'Built in panel plugins',
    innerDatasource: 'Built in datasource plugins',
    onlyTestDB: 'Only testdb datasource is supported',
    onlyIotEdge: 'Only IoT edge datasource is supported',
    onlyWebAccess: 'Only WebAccess datasource is supported',
    outerPanel: 'External panel plugins',
    outerDatasource: 'External datasource plugins',
    changeLogo: 'Custom enterprise logo(dashboard icon, not powered by wise PAAS)',
    SRPManage: 'SRP-Frame management',
    uploadManage: 'Picture/plugins upload management',
    mobileTypesetting: 'Mobile terminal layout',
    dashboardExport: 'Dashboard report export',
    multilingual: 'multilingual',
    dataImport: 'Dashboard data backup and import',
    emailCounsel: 'Email consultation',
    orderCounsel: 'Work order consultation',
    onlineVideo: 'Online technical documentation and video tutorials',
    onlineCourse: 'Online special training',
    onlineCustomizedCourse: 'Online customized training',
    onlineRemoteSupport: 'Online remote technical support',
    wechatSupport: 'Wechat technical support',
    weekdaysService: '5*8 respond to technical questions',
    solution: 'Solution\n(iFactory)',
    solutionDesc: 'Version of EHS or TPM solution combination',
    restrictDatasource: 'Only supports asset and alarm datasources, etc',
  },

  pluginsDesc: {
    function: 'Functions',
    introduction: 'Brief Introduction',
    complexDatatable: {
      introduction:
        'Complex table is a flexible configuration, which can meet complex and diverse tables, and supports the reverse writing function of tables and various flexible settings.',
      desc: {
        feature1: 'Support table row modification, addition and deletion;',
        feature2: 'Support the modification of the whole column data of the table;',
        feature3: 'Support flexible setting of various alarms;',
        feature4: 'Support adding a new column by customization;',
      },
    },
    oracle: {
      introduction:
        'Support the access of Oracle data of relational database. Through simple interface guidance and configuration, you can quickly associate and query between single table, single view, and multiple tables and views.',
      desc: {
        feature1: 'Support single table and single view interface guided query and SQL statement query;',
        feature2: 'Support cascading interface guided query and SQL statement query between multiple tables and views;',
        feature3: 'Oracle type variable query supports interface guidance;',
        feature4: 'Oracle supports dynamic variable query;',
      },
    },
    snowflake: {
      introduction:
        'Support the access of snowflake elastic data warehouse data. By simply configuring the connection information, you can easily and quickly access its data and present it on the dashboard.',
      desc: {
        feature1: 'Support flexible link information configuration;',
        feature2: 'Support data presentation through SQL query;',
        feature3: 'Request to support dynamic variable query;',
      },
    },
    streetView: {
      introduction:
        'Street view panel is a plug-in for displaying map details, which can be displayed in detail to the street. It supports the marking of specific longitude and latitude positions and the display of the data of the current position, supports the real-time drawing of trajectory maps, and supports the display of heat map information on the map.',
      desc: {
        feature1: 'Support worldwide geographical coordinates;',
        feature2: 'Support timeserie and table data types;',
        feature3: 'Provide dynamic trajectory drawing function;',
        feature4: 'Support map overlay heating map display effect;',
        feature5: 'Support the setting of center longitude and latitude;',
        feature6: 'Threshold color setting;',
      },
    },
    choropleth: {
      introduction:
        'Choropleth map panel is a map plug-in used to display the data level or distribution of provinces. This plug-in supports two display modes. One is that each area displays different color levels according to different data, and can mark bubbles to display the current value. The other one only needs to show the numerical difference of each region, which is displayed in a more three-dimensional effect. Similarly, bubbles can be marked to display the numerical value of the current region, and the data distribution is clear at a glance.',
      desc: {
        feature1: 'Support two display modes: color level and distribution;',
        feature2: 'Color level mode supports color range customization;',
        feature3: 'Data annotation bubbles can support style setting;',
      },
    },
    scatterMap: {
      introduction:
        'Scatter map panel is a beautiful world map plug-in for displaying geographical location data. It can mark a specific longitude and latitude position and display the data of the current position. It supports flexible color settings such as area and boundary line and the setting of position mark style.',
      desc: {
        feature1: 'Support worldwide geographical coordinates;',
        feature2: 'Support timeserie and table data types;',
        feature3:
          'Support the setting of longitude and latitude of the map center, zoom level, and whether it can be dragged;',
        feature4: 'Size and color setting of scattering, bubbles, etc;',
        feature5: 'Threshold color setting;',
        feature6: 'Provide marker jump mark display;',
        feature7: 'Provide color modification of water area, land, boundary and administrative name;',
      },
    },
    hydrograph: {
      introduction:
        'The hydrograph panel is a wise PAAS / Dashboard plug-in used to display percentage values, representing the current proportion. The plug-in uses animated waves to show the percentage, and the effect is cool. It supports the customization of field values and colors, and allows waves to display different colors under different data. It is intuitive and easy to understand with the display of numerical percentage. Its use and configuration are simple and the effect is cool.',
      desc: {
        feature1: 'Support font size and number of decimal points;',
        feature2:
          'The maximum value of user-defined calculation range is supported, and the percentage is calculated in combination with the current data;',
        feature3:
          'Support multiple field values and color settings, and you can add different field value ranges to show different business meanings as needed;',
        feature4: 'Figure size adapts to external panel size;',
      },
    },
    thermometer: {
      introduction:
        'Thermometer panel is a thermometer plug-in of wise PAAS / dashboard. The plug-in can intuitively display the value and state of temperature, and can be used in any scene that needs to display temperature.',
      desc: {
        feature1:
          'Support table and timeserie data sources, and support the display of statistical values of data (such as maximum value, minimum value, average value, latest value, etc.);',
        feature2: 'Flexible scale setting supports maximum and minimum scale value setting and scale interval setting;',
        feature3: 'Support to customize the threshold range of temperature;',
        feature4: 'Support font size setting and temperature unit setting;',
        feature5: 'The thermometer graphic display can be adjusted adaptively according to the size of the panel;',
      },
    },
  },

  admin: {
    editProfile: 'Edit Profile',
    disableLoginTooltip: 'Login Details Locked - managed in another system.',
    perferenceTooltip: 'Not finding dashboard you want? Star it first, then it should appear in this select box.',
    homeSrpFrameTooltip: 'Select srp frame name and lang,then go the srp frame Main page.',
    switchOrganization: 'Switch Organization',
    changeYourPassword: 'Change Your Password',
    oldPassword: 'Old Password',
    newPassword: 'New Password',
    confirmPassword: 'Confirm Password',
    changePassword: 'Change Password',
    ldapEnabled: `You cannot change password when ldap or auth proxy authentication is enabled.`,
    chooseDefaultDashboard: 'Choose default dashboard',
    chooseDefaultSRPFrame: 'Choose default SRP Frame',
  },

  alerting: {
    states: 'States',
    howToAdd: 'How to add an alert',
    pauseTitle: 'Pausing an alert rule prevents it from executing',
    editAlertRule: 'Edit alert rule',
    addingAlert: 'Adding an Alert',
    alertText1: `Alerts are added and configured in the Alert Tab
            of any dashboard graph panel, letting you build and visualize an alert using existing queries.`,
    alertText2: 'To persist your alert rule changes remember to save the dashboard.',
    okText: 'OK',
    alertText: 'ALERTING',
    keepState: 'Keep Last State',
    no_dataText: 'NO DATA',
    pausedText: 'PAUSED',
    forText: 'for',
    pendingText: 'PENDING',
    forTextStatus: '',
    unknownText: 'UNKNOWN',
    newNoticeChannel: 'New Notification Channel',
    notificationMes: 'Notification message details...',
    editNoticeChannel: 'Edit Notification Channel',
    defaultSend: 'Default (send on all alerts)',
    defaultSendTip: 'Use this notification for all alerts',
    includeImage: 'Include image',
    includeImageTip: 'Captures an image and include it in the notification',
    disableMessage: 'Disable Resolve Message',
    disableMessageTip: 'Disable the resolve message [OK] that is sent when alerting state returns to false',
    sendReminders: 'Send reminders',
    sendRemindersTip: 'Send additional notifications for triggered alerts',
    sendReminderEvery: 'Send reminder every',
    sendReminderEveryTip: 'Specify how often reminders should be sent, e.g. every 30s, 1m, 10m, 30m or 1h etc.',
    sendReminderText:
      'Alert reminders are sent after rules are evaluated. Therefore a reminder can never be sent more frequently than a configured alert rule evaluation interval.',
    removeAlertText2: `Panel includes an alert rule, removing panel will also remove alert rule`,
    toConfirm: 'to confirm',
    searchAlerts: 'Search alerts',
    noHasAlert: 'There are no notification channels defined yet.',
    addChannel: 'Add channel',
    proTip: 'You can include images in your alert notifications.',
    errorTip: 'The datasource does not support alerting queries',
    errorTip1: 'Template variables are not supported in alert queries',
    errorTip2: 'Could not find any metric queries',
  },
  create: {
    convertToRow: 'Convert to row',
    pasteCopiedPanel: 'Paste copied panel',
    chooseVisualization: 'Choose Visualization',
    cycleViewMode: 'Cycle view mode',
    timeRangeZoomOut: 'Time range zoom out',
    saveNameText: 'A dashboard with the same name in selected folder already exists.',
    saveVersionText: 'Someone else has updated this dashboard.',
    saveNameText1: 'Would you still like to save this dashboard?',
    newDashboardFolder: 'New Dashboard Folder',
    startPlaylist: 'Start playlist',
    playlistsaved: 'Playlist saved',
    unableSavePlaylist: 'Unable to save playlist',
    playlistDeleted: 'Playlist deleted',
    unableDeletePlaylist: 'Unable to delete playlist',
    previousDashboard: 'Go to previous dashboard',
    stopPlaylist: 'Stop playlist',
    nextDashboard: 'Go to next dashboard',
    inNormalMode: 'In Normal mode',
    inTVMode: 'In TV mode',
    withAutoFitPanels: 'with auto fit panels',
    inKioskMode: 'In Kiosk mode',
    playlistDescription: `A playlist rotates through a pre-selected list of Dashboards. A Playlist can be a great way to build situational awareness, or just show off your metrics to your team or visitors.`,
    playlistEmpty: 'Playlist is empty, add dashboards below.',
    findDashboardsByName: 'Find dashboards by name',
    addToPlaylist: 'Add to playlist',
    snapshotUrl: 'Snapshot url',
    external: 'External',
    uploadJsonFile: 'Upload .json file',
    grafanaComDashboard: 'Grafana.com Dashboard',
    pasteGrafanaComDashboardUrlId: 'Paste Grafana.com dashboard url or id',
    couldNotFindDashboard: 'Could not find dashboard',
    orPasteJSON: 'Or paste JSON',
    markAsFavorite: 'Mark as favorite',
    addNoteDescribeChanges: 'Add a note to describe your changes &hellip',
    openOriginalDashboard: 'Open original dashboard',
    openMobilePage: 'Open mobile page',
    shareLinkInfo: `Create a direct link to this dashboard or panel, customized with the options below.`,
    currentTimeRange: 'Current time range',
    templateVariables: 'Template variables',
    snapshotDeleteText: 'Are you sure you want to delete snapshot ',
    shareSnapshotInfo: `A snapshot is an instant way to share an interactive dashboard publicly.
        When created, we <strong>strip sensitive data</strong> like queries (metric, template and annotation) and panel links,
        leaving only the visible metric data and series names embedded into your dashboard.`,
    shareSnapshotInfo1: `Keep in mind, your <strong>snapshot can be viewed by anyone</strong> that has the link and can reach the URL.
        Share wisely.`,
    snapshotName: 'Snapshot name',
    expire: 'Expire',
    shareSnapshotInfo2: `You may need to configure the timeout value if it takes a long time to collect your dashboard's metrics.`,
    localSnapshot: 'Local Snapshot',
    copyLink: 'Copy Link',
    makeMistake: 'Did you make a mistake?',
    deleteSnapshot: 'delete snapshot.',
    exportsharingExternally: 'Export for sharing externally',
    exportsharingTooltip: `Useful for sharing dashboard publicly on grafana.com. Will templatize data source names. Can then only be used with the specific dashboard import API.`,
    saveToFile: 'Save to file',
    viewJSON: 'View JSON',
    clickButtonGenerateReport: 'Click button to generate report',
    saveToPdf: 'Save to pdf',
    sharePanel: 'Share Panel',
    directLinkRenderedImage: 'Direct link rendered image',
    shareModalInfoText: `The html code below can be pasted and included in another web page. Unless anonymous access
        is enabled, the user viewing that page need to be signed into WISE-IoTSuite/Dashboard for the graph to load.`,
    selectA: 'Select a ',
    dataSource: ' data source',
    uidValidationError: 'Dashboard named {dashboardTitle} in folder {folderTitle} has the same uid',
    importUidValidationError: '{dashboardTitle} in folder {folderTitle} has the same uid',
  },
  dashboards: {
    /*Home*/
    installGrafana: 'Install WISE-IoTSuite/Dashboard',
    creatDatasource: 'Create your first data source',
    addDatasource: 'Add data source',
    createDashboard: 'Create your first dashboard',
    newDashboard: 'New dashboard',
    inviteTeam: 'Invite your team',
    addUsers: 'Add Users',
    installApp: 'Install apps & plugins',
    explorePlugin: 'Explore plugin repository',
    starredDashboard: 'Starred dashboards',
    recentlyView: 'Recently viewed dashboards',
    installedApp: 'Installed Apps',
    installedPanel: 'Installed Panels',
    installedDatasource: 'Installed Datasources',
    clearCurrentQuery: 'Clear current search query and filters',
    noDashFound: 'No dashboards found',
    noMatch: 'No dashboards matching your query were found.',
    findByName: 'Find Dashboard by name',
    starred: 'Starred',
    filterByTag: 'Filter By Tag',
    filterByStar: 'Filter by Starred',
    deleteText: 'Do you want to delete the ',
    deleteText1: 'selected folder and dashboard',
    deleteText2: 'All dashboards of the selected folder will also be deleted',
    deleteText3: 'selected folder and all its dashboards',
    deleteText4: 'selected dashboard',
    chooseDashboard: 'Choose Dashboard Folder',
    moveMessage: 'Move the',
    moveToDash: 'selected dashboards to the following folder',
    updateOn: 'Updated on',
    uniqueMas: 'Unique identifier (uid)',
    uniqueTip: ` The unique identifier (uid) of a dashboard can be used for uniquely identify a dashboard between multiple WISE-IoTSuite/Dashboard installs.
        The uid allows having consistent URL’s for accessing dashboards so changing the title of a dashboard will not break any
        bookmarked links to that dashboard.`,
    importMas: 'Importing Dashboard from',
    sameName: 'A dashboard in this folder with the same name already exists',
    sameFolder: 'A folder or dashboard in the general folder with the same name already exists',
    requiredName: 'Name is required',
    folderMas: 'This is a reserved name and cannot be used for a folder.',
    subTitleDashboard: 'Manage folder dashboards & permissions',
    forderSetting: 'Folder Settings',
    /*Playlist */
    noPlayList: 'There are no playlists created yet.',
    playTip: 'You can use playlists to cycle dashboards on TVs without user control',
    createPlay: 'Create Playlist',
    deletePlay: `Are you sure you want to delete playlist{name}?`,
    editPlay: 'Edit Playlist',
    creDashboard: 'Create Dashboard',
    manDashboard: 'Manage dashboards',
    moveTo: 'Add/move dashboards to your folder at ->',
    hasNoDashboard: 'This folder does not have any dashboards yet',
  },
  treeMenu: {
    openleftMenu: 'Open Left Menu',
    dataConfig: 'Data Config',
    headersConfig: 'Headers Config',
    generalConfig: 'General Config',
    defaultExpandedWidth: 'Default Expanded Width',
    initialGroup: 'initial Group',
    groupVariableAssociation: 'Group Variable',
    objectVariableAssociation: 'Object Variable',
    selectAsset: 'Select Asset',
    selectAssetObj: 'Select AssetObj',
    refreshVisible: 'Refresh Visible',
    area: 'Area',
    pleaseInputObjectGroupName: 'Input object group name',
    titleColor: 'Title Color',
    inputBgColor: 'Input Background Color',
    inputTxtColor: "Input Text Color",
    inputBorderColor: "Input Border color",
    backgroundColor: 'Background Color',
    fontColor: 'Font Color',
    menuActiveBgColor: 'Menu Active Bg Color',
    menuActiveFontColor: 'Menu Active Font Color',
    menuScrollColor: 'Menu Scroll Color',
    menuIconOpenUrl: 'Menu Icon Open Url',
    menuFontSize: 'Menu Font Size',
    menuFontSpacing: 'Menu Font Spacing',
    menuFontTips: 'Need to add px units',
    menuIconCloseUrl: 'Menu Icon Close Url',
    treeMenuProperty: 'Query assets',
    treeMenuTagMultiple: 'Asset activation multiple',
    menuAll: 'Menu All',
    searchStyles: "Search Styles",
    menuStyles: "Menu Styles"
  },
  annotations: {
    emptyListCtaTitle: 'There are no custom annotation queries added yet',
    buttonTitle: 'Add Annotation Query',
    infoBoxTitle: 'What are annotations?',
    infoBoxHTML1: `<p>Annotations provide a way to integrate event data into your graphs. They are visualized as vertical lines
        and icons on all graph panels. When you hover over an annotation icon you can get event text &amp; tags for
        the event. You can add annotation events directly from grafana by holding CTRL or CMD + click on graph (or
        drag region). These will be stored in Grafana's annotation database.`,
    infoBoxHTML2: 'Checkout the',
    infoBoxHTML3: 'Annotations documentation',
    infoBoxHTML4: 'for more information.',
    builtIn: '(Built-in)',
    hiddenTooltip: 'Hides the annotation query toggle from showing at the top of the dashboard',
    annotationQueryFailed: 'Annotation Query Failed',
  },
  dashboardStyle: {
    styleSetting: 'Dashboard Style Settings',
    background: 'Background',
    color: 'Color',
    image: 'Image',
    panelStyle: 'Panel Style Settings',
    preStyle: 'Predefined Styles',
    border: 'Panel Border',
    borderColor: 'Border Color',
    borderStyle: 'Border Style',
    borderWidth: 'Border Width',
    borderWidthTip: 'Please enter a number as the width of the border',
    panelRadius: 'Panel Radius',
    radius: 'Radius',
    radiusColor: 'Radius Color',
    borderShadow: 'Border Shadow',
    borderGradient: 'Border Gradient',
    gradientMode: 'Gradient Mode',
    gradientColor: 'Gradient Color',
    panelTitle: 'Panel Title',
    startColor: 'Start Gradient Color',
    endColor: 'End Gradient Color',
    pillarColor: 'Pillar Color',
    shadowShow: 'Shadow Show',
    reduceTopMargin: 'Reduce top margin',
  },
  dashboardLinks: {
    links: 'Dashboard Links',
    linkTitle: 'There are no dashboard links added yet',
    addLink: 'Add Dashboard Link',
    pTip:
      'Dashboard Links allow you to place links to other dashboards and web sites directly in below the dashboard header.',
    whatLink: 'What are Dashboard Links?',
    withTag: 'With tags',
    include: 'Include',
    asDrop: 'As dropdown',
    varValue: 'Variable values',
    oneLine: 'One line enabled',
  },
  orgsImport: {
    datalog: 'Import DataLog.',
    closeDataLog: 'Import completed.',
    wait: 'Waiting...',
    sameStructImport: 'Import The Same Structure',
    importSpecifiedOrg: 'Import To The Specified Org',
    selectFile: 'please select exportedOrgs.xxx.zip file.',
    startImport: 'Start printing related log information . . .',
    waitOverwrite: 'Please wait a moment and overwriting what you have chosen now.',
    callOverwrite: 'Calling the overwrite method at this time.',
    annoInfoSuccess: 'The anonymous information of the selected {name} datasource is updated successfully.',
    annoInfoError: '{name} datasource anonymous in {org} org update failed.',
    dataUpSuccess: 'The selected {name} datasource was successfully updated.',
    dataUpFailed: 'Selected datasource update failed.',
    dashOverSuccess: 'The information of the selected {name} dashboard has been updated successfully.',
    dashOverFaild: 'Dashboard in {orgId} org overwrite failed.',
    srpUpSuccess: 'The selected {name} srpframe was successfully updated.',
    srpUpFailed: '"SRPFrame in {orgId} org overwrite failed."',
    startGet: 'Start getting the content of each file.',
    tip: 'Tips',
    importMoreOne: 'Import more than one org, only import the first org ({name}) data for you.',
    importText2: 'Would you still like to import {name} Org?',
    dashExist: 'The {slug} of the {folder} folder under {orgName} org already exists.',
    dashImportSucc: 'The {slug} dashboard under the {folder} folder of {orgName} org was imported successfully.',
    dashImportFalied: 'Dashboard in {org} org import failed.',
    folderResult: 'The dashboard under the {folder} folder has been successfully returned.',
    getOrgFailed: 'Failed to get {folder} folder under {orgName} org.',
    getFrameFailed: 'get srpframe faile.',
    srpImportSuccess: 'srpFrames successfully import under {orgName} org.',
    srpImportFailed: 'SRPFrame in {currentId} org import failed.',
    srpExist: 'The {srpName} SRP-Frame under {orgName} org already exists.',
    datasourceError: 'Error occurred while importing datasource.',
    dataImportSuccess: '{paasOrgName} - org {datasourceName} datasource imported successfully.',
    dataImportFailed: 'Datasource in {currentId} org import failed.',
    annoImportSuccess: 'The anonymous information of the datasource under {paasOrgName} org was successfully imported.',
    annoImportFalied: 'Datasource annoymous in {currentId} org import failed.',
    creNewOrg: 'Creating new {orgName} org and importing data.',
    creOrgFailed: 'Create org failed.',
    nowImportSRPFrame: 'Now is importing srpFrame...',
    dashsImportFalied: 'Dashboard import failed.',
    createFolderFalied: 'Create folder failed.',
    preferenceError: 'Error occurred while importing preference.',
    imgUploadSuccess: '{orgName} - org {imageName}  image imported successfully.',
    imgUploadError: '{orgName} - org {imageName}  image imported failed.',
  },
  versions: {
    showMoreVersions: 'Show more versions',
    compareVersions: 'Compare versions',
    restoreToVersion: 'Restore to version',
    viewJSONDiff: 'View JSON Diff',
    canCompareText: 'You can only compare 2 versions at a time',
  },
  mobile: {
    groups: 'Groups',
    recover: 'Recover',
    addGroup: 'Add Group',
    noDashboardGroupAddedYet: 'There are no dashboard group added yet',
    whatAreDashboardGroup: 'What are Dashboard Group?',
    whatAreDashboardGroupInfo: `We recommend that a large amount of data be presented in a grouping manner on the small screen of the mobile device,
        by establishing Groups`,
    movePanel: 'move panel',
    moveOut: 'move out',
    moveToRecover: 'move to recover',
  },
  graph: {
    drawModes: 'Draw Modes',
    bars: 'Bars',
    lines: 'Lines',
    points: 'Points',
    modeOptions: 'Mode Options',
    fillGradient: 'Fill Gradient',
    lineWidth: 'Line Width',
    staircase: 'Staircase',
    pointRadius: 'Point Radius',
    plotSelected: 'Plot Selected',
    plotDblclick: 'Plot Dblclick',
    hoverTooltip: 'Hover tooltip',
    stackedValue: 'Stacked value',
    stackTotal: 'Stack Total',
    stackingNullValue: 'Stacking & Null value',
    stack: 'Stack',
    percent: 'Percent',
    nullValue: 'Null value',
    stackPanel: 'Stack Panel',
    drilldownDetailLink: 'Drilldown Detail Link',
    includeTimeRange: 'Include time range',
    includeCurrentTime: 'Include current time',
    urlParams: 'Url parameter',
    urlParamsTips:
      'When you check the variable here, you can use [variable] in the Url to pass it to the new page in the new link',
    XAxis: 'X-Axis',
    precisionFormat: 'Precision format',
    adjustableTimeRange: 'Adjustable TimeRange',
    numberOfBuckets: 'Number of buckets',
    XMin: 'X-Min',
    XMax: 'X-Max',
    YAxes: 'Y-Axes',
    YAxis: 'Y-Axis',
    alignLeftAndRightYaxes: 'Align left and right Y-axes',
    AlignmentYaxesTooltip: 'Alignment of Y-axes are based on this value, starting from Y=0',
    decimalPrecision: 'Override automatic decimal precision for y-axis',
    asTable: 'As Table',
    toTheRight: 'To the right',
    widthTooltip: 'Set a min-width for the legend side table/block',
    hideSeries: 'Hide series',
    withOnlyNulls: 'With only nulls',
    withOnlyZeros: 'With only zeros',
    seriesOverrides: 'Series overrides',
    aliasOrRegex: 'alias or regex',
    addSeriesOverride: 'Add series override',
    addSeriesOverrideTip: 'Regex match example: /server[0-3]/i',
    thresholdsTimeRegions: 'Thresholds & Time Regions',
    addThreshold: 'Add Threshold',
    thresholdsDisabled: `Visual thresholds options <strong>disabled.</strong>
        Visit the Alert tab update your thresholds. <br>
        To re-enable thresholds, the alert rule must be deleted from this panel.`,
    fillColor: 'Fill color',
    line: 'Line',
    lineColor: 'Line color',
    addTimeRegion: 'Add time region',
    addTimeRegionTip: 'All configured time regions refers to UTC time',
    statistics: 'Statistics',
    UCL: 'UCL',
    CL: 'CL',
    LCL: 'LCL',
    showDetails: 'Show details',
    infoTextLink: `With data links you can reference data variables like series name, labels and values. Type CMD+Space,
        CTRL+Space, or $ to open variable suggestions.`,
    addLink: 'Add link',
    customScale: 'Scale',
    customScaleEnable: 'Custom Scale',
    markingArea: 'Marking Area',
    startTime: 'Start Time',
    linkageSettings: 'Linkage Settings',
    addALinkage: 'Add a linkage',
    endTime: 'End Time',
    lineFill: 'Line fill',
    Linewidth: 'Line width',
    nullPointMode: 'Null point mode',
    fillBelowTo: 'Fill below to',
    staircaseLine: 'Staircase line',
    Dashes: 'Dashes',
    HiddenSeries: 'Hidden Series',
    DashLength: 'Dash Length',
    DashSpace: 'Dash Space',
    Discrete: 'Discrete',
    PointsRadius: 'Points Radius',
    Yaxis: 'Y-axis',
    Zindex: 'Z-index',
    Transform: 'Transform',
    Hideintooltip: 'Hide in tooltip',
    DiscreteDataType: 'Discrete Data Type',
    DiscreteDayShift: 'Discrete Day Shift',
    showModes: 'Show Modes',
    showXSlider: 'Show X Slider',
    graphMode: 'Graph Mode',
    showMaxPoint: 'Show Max Point',
    Spline: 'Smooth',
    markingMaxPoint: 'Marking Max Point',
    dateFormatAsX: 'Date As X-axis',
    hideValue: 'Hide Value',
    metricNameColor: 'Metric Name Color',
    metricNameSize: 'Metric Name Size',
    metricNamePositionUp: 'Line Name Up',
    showValue: 'Show Value',
  },
  math: {
    math: 'Math',
    calculate: 'Calculate',
    expression: 'Expression',
    expressionTip: `A,B,C,D represent data source,<br>and the supported operators are +, -, *, /, ().`,
    inputTip: 'Please enter the correct expression',
    addMetric: 'Add Metric',
  },
  singlestat: {
    thresholdsTip: `Define two threshold values<br> 50,80 will produce: value < 50 = Green, 50 < = value < 80
        = Yellow, value > = 80 = Red.Note:The threshold value supports filling and the query return configuration
        is supported. If the threshold value is filled in and a query is configured at the same time, the query return threshold has a higher priority`,
    sparkLines: 'Spark lines',
    fullHeight: 'Full height',
    gauge: 'Gauge',
    minValueText: 'Min value is bigger than max.',
    thresFontSize: 'Threshold font size',
    thresholdLabels: 'Threshold labels',
    thresholdMarkers: 'Threshold markers',
    setValueMappings: 'Set value mappings',
    addValueMapping: 'Add a value mapping',
    setRangeMappings: 'Set range mappings',
    addRangeMapping: 'Add a range mapping',
  },
  text: {
    autoplayInterval: 'Autoplay Interval',
    autoplayUrl: 'Autoplay Url',
    addUrl: 'Add Url',
  },
  heatmap: {
    bucketBound: 'Bucket bound',
    bucketBoundTip: 'Use series label as an upper or lower bucket bound.',
    bucketsYTip: 'Number of buckets for Y axis.',
    sizeYTip: 'Size of bucket. Has priority over Buckets option.',
    splitFactor: 'Split Factor',
    splitFactorTooltip: `For log scales only. By default Y values is splitted by integer powers of log base (1, 2, 4, 8, 16, ... for log2). This option allows to split each default bucket into specified number of buckets.`,
    bucketsXTip: 'Number of buckets for X axis.',
    sizeXTip:
      'Size of bucket. Number or interval (10s, 5m, 1h, etc). Supported intervals: ms, s, m, h, d, w, M, y. Has priority over Buckets option.',
    dataFormatTip:
      'Time series: create heatmap from regular time series. <br>Time series buckets: use histogram data returned from data source. Each series represents bucket which upper/lower bound is a series label.',
    reverseOrder: 'Reverse order',
    yBucketBoundTip: 'Use series label as an upper or lower bucket bound.',
    exponent: 'Exponent',
    colorScale: 'Color scale',
    showLegend: 'Show legend',
    hideZero: 'Hide zero',
    showTooltip: 'Show tooltip',
  },
  pluginlist: {
    recentlyViewed: 'WARNING: This list will be cleared when clearing browser cache',
    searchOptions: 'Search options',
    limitNumberTo: 'Limit number to',
  },
  dashlist: {
    showHeadings: 'Show headings',
  },
  alertlist: {
    alertsFromDashboard: 'Alerts from this dashboard',
    alertName: 'Alert name',
    alertNameQuery: 'Alert name query',
    dashboardTitle: 'Dashboard title',
    dashboardTitleQuery: 'Dashboard title query',
    dashboardTags: 'Dashboard tags',
    stateFilter: 'State filter',
    ok: 'Ok',
    paused: 'Paused',
    noData: 'No data',
    executionError: 'Execution error',
    pending: 'Pending',
  },
  table: {
    tableTransform: 'Table Transform',
    paging: 'Paging',
    rowsPerPage: 'Rows per page',
    columnStyles: 'Column Styles',
    applyColumnsNamed: 'Apply to columns named',
    patternTip: 'Specify regex using /my.*regex/ syntax',
    columnHeader: 'Column Header',
    renderValueLink: 'Render value as link',
    nameOrRegex: 'Name or regex',
    overrideHeaderLabel: 'Override header label',
    sanitizeHTML: 'Sanitize HTML',
    preserveFormatting: 'Preserve Formatting',
    commaSeparatedValues: 'Comma separated values',
    urlInfo1: 'Specify an URL (relative or absolute)',
    urlInfo2: 'Use special variables to specify cell values:',
    urlInfo3: 'refers to current cell value',
    urlInfo4: 'refers to Nth column value in current row. Column indexes are started from 0. For instance,',
    urlInfo5: `refers to second column's value.`,
    urlInfo6:
      'syntax. By default values are URI encoded. If the value is a complete URL you can disable all encoding using',
    tooltipInfo1: 'Specify text for link tooltip.',
    tooltipInfo2:
      'This title appears when user hovers pointer over the cell with link. Use the same variables as for URL.',
    removeRule: 'Remove Rule',
    addColumnStyle: 'Add column style',
  },
  bargauge: {
    calc: 'Calc',
    orientation: 'Orientation',
    templateVariables: 'Template Variables:',
    seriesName: '__series.name',
  },
  checkLicense: {
    checkLicense: 'Check License',
    welcome: 'Welcome to use WISE-IoTSuite/Dashboard',
    nolicenseKey: 'No license key or unlawful license key',
    recheck: 'Recheck',
    subscribeText: 'Please click the button below to subscribe',
    toSubscribe: 'To subscribe',
    toLogin: 'To login',
    subscribeText1: 'Successful subscription? To login',
    productInformation: 'Product Information',
    productName: 'product name',
    partNumber: 'part number',
    subscribedSpace: 'Subscribed Space',
    datacenter: 'datacenter',
    cluster: 'cluster',
    workspace: 'workspace',
    namespace: 'namespace',
  },
  testdata: {
    optional: 'optional',
    lines: 'Lines',
    step: 'Step',
    stepInfo: 'The number of seconds between datapoints.',
    csvValueInfo: `Comma separated values. Each value may be an int, float, or null and must not
        be empty. Whitespace and trailing commas are removed.`,
    onCount: 'Count',
    onCountInfo: `The number of values within a cycle, at the start of the cycle, that should
        have the onValue.`,
    offCount: 'Count',
    offCountInfo: 'The number of offValues within the cycle.',
    onValue: 'Value',
    onValueInfo: 'The value for "on values", may be a int, float, or null.',
    offValue: 'Value',
    offValueInfo: 'The value for "off values", may be a int, float, or null.',
    speed: 'Speed',
    spread: 'Spread',
    noise: 'Noise',
    bands: 'Bands',
    fetchURL: 'Fetch URL',
    annotationScenario: 'Annotation scenario',
    setup: 'Setup',
    setupText: 'See github for more information about setting up a reproducable test environment.',
    seriesCount: 'Series count',
    Address: 'Hostname',
    Value: 'Metric',
    Longitude: 'Longitude',
    Latitude: 'Latitude',
    startValue: 'Start value',
  },
  stackdriver: {
    Authentication1: `<h4>Stackdriver Authentication</h4>
        <p>There are two ways to authenticate the Stackdriver plugin - either by uploading a Service Account key file, or by
          automatically retrieving credentials from the Google metadata server. The latter option is only available
          when running Grafana on a GCE virtual machine.</p>

        <h5>Uploading a Service Account Key File</h5>
        <p>
          First you need to create a Google Cloud Platform (GCP) Service Account for
          the Project you want to show data for. A Grafana datasource integrates with one GCP Project. If you want to
          visualize data from multiple GCP Projects then you need to create one datasource per GCP Project.
        </p>
        <p>
          The <strong>Monitoring Viewer</strong> role provides all the permissions that Grafana needs. The following API
          needs to be enabled on GCP for the datasource to work: <a class="external-link" target="_blank" href="https://console.cloud.google.com/apis/library/monitoring.googleapis.com">Monitoring
            API</a>
        </p>

        <h5>GCE Default Service Account</h5>
        <p>
          If Grafana is running on a Google Compute Engine (GCE) virtual machine, it is possible for Grafana to
          automatically retrieve the default project id and authentication token from the metadata server. In order for this to
          work, you need to make sure that you have a service account that is setup as the default account for the virtual
          machine and that the service account has been given read access to the Stackdriver Monitoring API.
        </p>

        <p>Detailed instructions on how to create a Service Account can be found <a class="external-link" target="_blank"
            href="http://docs.grafana.org/datasources/stackdriver/">in
            the documentation.</a>
        </p>`,
    authentication: 'Authentication',
    authenticationInfo: `Upload your Service Account key file or paste in the contents of the file. The file
        contents will be encrypted and saved in the Grafana database.`,
    authenticationType: 'Authentication Type',
    uploadServiceAccount: 'Upload Service Account key file',
    pasteServiceAccount: 'Or paste Service Account key JSON',
    uploadedKeyDetails: 'Uploaded Key Details',
    project: 'Project',
    clientEmail: 'Client Email',
    tokenURI: 'Token URI',
    privateKey: 'Private Key',
    resetServiceAccountKey: 'Reset Service Account Key',
    resetInfo: 'Reset to clear the uploaded key and upload a new file.',
    saveChanges: 'Do not forget to save your changes after uploading a file.',
    verifyTest: 'Verify GCE default service account by clicking Save & Test',
    service: 'Service',
    selectServices: 'Select Services',
    selectMetric: 'Select Metric',
    groupBy: 'Group By',
    aggregation: 'Aggregation',
    selectReducer: 'Select Reducer',
    advancedOptions: 'Advanced Options',
    aligner: 'Aligner',
    selectAlignment: 'Select Alignment',
    alignmentPeriod: 'Alignment Period',
    aliasBy: 'Alias By',
    aliasPatterns: `<h5>Alias Patterns</h5>Format the legend keys any way you want by using alias patterns. Format the legend keys any way you want by using alias patterns.
        <br /> <br />Example:`,
    aliasPatterns1: `Result: &nbsp;&nbsp;<code>cpu/usage_time - server1-europe-west-1</code><br />
        <br /><strong>Patterns</strong>`,
    aliasPatterns2:
      `<ul><li><code>{${'{{metricDescriptor.type}}'}}</code> = metric type e.g. compute.googleapis.com/instance/cpu/usage_time</li>` +
      `<li><code>{${'{{metricDescriptor.name}}'}}</code> = name part of metric e.g. instance/cpu/usage_time</li>` +
      `<li><code>{${'{{metricDescriptor.service}}'}}</code> = service part of metric e.g. compute</li>` +
      `<li><code>{${'{{metricDescriptor.label.label_name}}'}}</code> = Metric label metadata e.g. metricDescriptor.label.instance_name</li>` +
      `<li><code>{${'{{resource.label.label_name}}'}}</code> = Resource label metadata e.g. resource.label.zone</li>` +
      `<li><code>{${'{{bucket}}'}}</code> = bucket boundary for distribution metrics when using a heatmap in WISE-IoTSuite/Dashboard</li></ul>`,
    annotationInfo1: `Annotation Query Format`,
    annotationInfo2: `An annotation is an event that is overlaid on top of graphs. Annotation rendering is expensive so it is
        important to limit the number of rows returned.`,
    annotationInfo3: `The Title and Text fields support templating and can use data returned from the query. For example, the Title
        field could have the following text:`,
    annotationInfo4: `has value:`,
    annotationInfo5: `Example Result:`,
    annotationInfo6: `value of the metric/point`,
    annotationInfo7: `type e.g.`,
    annotationInfo8: `name part of metric e.g.`,
    annotationInfo9: `service part of metric e.g.`,
    annotationInfo10: `Metric label metadata e.g`,
    annotationInfo11: ` label metadata e.g.`,
  },
  prometheus: {
    scrapeInterval: 'Scrape interval',
    scrapeTooltip: `Set this to your global scrape interval defined in your Prometheus config file. This will be used as a lower limit for the
        Prometheus step query parameter.`,
    queryTimeout: 'Query timeout',
    queryTimeoutTip: 'Set the Prometheus query timeout.',
    HTTPMethod: 'HTTP Method',
    misc: 'Misc',
    customQueryParameters: 'Custom query parameters',
    validation: 'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s',
    customQueryTip: 'Add Custom parameters to Prometheus or Thanos queries.',
    customQueryPlace: `Example: max_source_resolution=5m&timeout=10`,
    noMetricsFound: '(No metrics found)',
    loadingMetrics: 'Loading metrics...',
    promQLCheatSheet: 'PromQL Cheat Sheet',
    enterPromQLQuery: 'Enter a PromQL query',
    legendTip: `Controls the name of the time series, using name or pattern. For example
        {{hostname}} will be replaced with label value for the label hostname.`,
    legendFormat: 'legend format',
    minStep: 'Min step',
    minStepTip: `Leave blank for auto handling based on time range and panel width.
        Note that the actual dates used in the query will be adjusted
    to a multiple of the interval step.`,
    instant: 'Instant',
    linkGraphInPrometheus: 'Link to Graph in Prometheus',
    CHEATTitle1: 'Request Rate',
    CHEATLabel1: `Given an HTTP request counter, this query calculates the per-second average request rate over the last 5 minutes.`,
    CHEATTitle2: `95th Percentile of Request Latencies`,
    CHEATLabel2: `Calculates the 95th percentile of HTTP request rate over 5 minute windows.`,
    CHEATTitle3: `Alerts Firing`,
    CHEATLabel3: `Sums up the alerts that have been firing over the last 24 hours.`,
    searchExpression: 'Search expression',
    step: 'step',
    fieldFormats: 'Field formats',
    otherOptions: 'Other options',
    ALERTS: 'ALERTS',
    alertname: 'alertname',
    tagLabel: 'label1,label2',
    instance: 'instance',
    otherOptionsTip: `The unit of timestamp is milliseconds. If the unit of the series value is seconds, multiply its range vector by 1000.`,
    seriesValueTimestamp: 'Series value as timestamp',
  },
  postgres: {
    schema: 'Schema',
    schema_: 'schema',
    SSLMode: 'SSL Mode',
    SSLModeInfo:
      'This option determines whether or with what priority a secure SSL TCP/IP connection will be negotiated with the server.',
    configured: 'configured',
    versionInfo: `This option controls what functions are available in the PostgreSQL query builder.`,
    timescaleDB: 'TimescaleDB',
    Help: `<a href="https://github.com/timescale/timescaledb" class="pointer" target="_blank">TimescaleDB</a>
 is a time-series database built as a PostgreSQL extension. If enabled, Grafana will use <code>time_bucket</code>
 in the <code>$__timeGroup</code> macro and display TimescaleDB specific aggregate functions in the query builder.`,
    minTimeIntervalInfo: `A lower limit for the auto group by time interval. Recommended to be set to write frequency,
        for example <code>1m</code> if your data is written every minute.`,
    userPermission: `<h5>User Permission</h5>
		<p>
			The database user should only be granted SELECT permissions on the specified database &amp; tables you want to query.
			WISE-IoTSuite/Dashboard does not validate that queries are safe so queries can contain any SQL statement. For example, statements
			like <code>DELETE FROM user;</code> and <code>DROP TABLE user;</code> would be executed. To protect against this we
			<strong>Highly</strong> recommmend you create a specific PostgreSQL user with restricted permissions.
        </p>`,
    helpContent:
      `<pre class="gf-form-pre alert alert-info">Time series:\n` +
      `- return column named <i>time</i> (UTC in seconds or timestamp)\n` +
      `- return column(s) with numeric datatype as values\n` +
      `Optional:\n` +
      `  - return column named <i>metric</i> to represent the series name.\n` +
      `  - If multiple value columns are returned the metric column is used as prefix.\n` +
      `  - If no column named metric is found the column name of the value column is used as series name\n\n` +
      `Resultsets of time series queries need to be sorted by time.\n\n` +
      `Table:\n` +
      `- return any set of columns\n\n` +
      `Macros:\n` +
      `- $__time(column) -&gt; column as "time"\n` +
      `- $__timeEpoch -&gt; extract(epoch from column) as "time"\n` +
      `- $__timeFilter(column) -&gt; column BETWEEN '2017-04-21T05:01:17Z' AND '2017-04-21T05:01:17Z'\n` +
      `- $__unixEpochFilter(column) -&gt;  column &gt;= 1492750877 AND column &lt;= 1492750877\n` +
      `- $__unixEpochNanoFilter(column) -&gt;  column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872\n` +
      `- $__timeGroup(column,'5m'[, fillvalue]) -&gt; (extract(epoch from column)/300)::bigint*300\n` +
      `     by setting fillvalue grafana will fill in missing values according to the interval\n` +
      `     fillvalue can be either a literal value, NULL or previous; previous will fill in the previous seen value or NULL if none has been seen yet\n` +
      `- $__timeGroupAlias(column,'5m') -&gt; (extract(epoch from column)/300)::bigint*300 AS "time"\n` +
      `- $__unixEpochGroup(column,'5m') -&gt; floor(column/300)*300\n` +
      `- $__unixEpochGroupAlias(column,'5m') -&gt; floor(column/300)*300 AS "time"\n\n` +
      `Example of group by and order by with $__timeGroup:\n` +
      `SELECT\n` +
      `  $__timeGroup(date_time_col, '1h'),\n` +
      `  sum(value) as value\n` +
      `FROM yourtable\n` +
      `GROUP BY time\n` +
      `ORDER BY time\n\n` +
      `Or build your own conditionals using these macros which just return the values:\n` +
      `- $__timeFrom() -&gt;  '2017-04-21T05:01:17Z'\n` +
      `- $__timeTo() -&gt;  '2017-04-21T05:01:17Z'\n` +
      `- $__unixEpochFrom() -&gt;  1492750877\n` +
      `- $__unixEpochTo() -&gt;  1492750877\n` +
      `- $__unixEpochNanoFrom() -&gt;  1494410783152415214\n` +
      `- $__unixEpochNanoTo() -&gt;  1494497183142514872\n` +
      `</pre>`,
    annotationHelp: `
        <pre class="gf-form-pre alert alert-info"><h6>Annotation Query Format</h6>
An annotation is an event that is overlaid on top of graphs. The query can have up to three columns per row, the time column is mandatory. Annotation rendering is expensive so it is important to limit the number of rows returned.

- column with alias: <b>time</b> for the annotation event time. Use epoch time or any native date data type.
- column with alias: <b>text</b> for the annotation text
- column with alias: <b>tags</b> for annotation tags. This is a comma separated string of tags e.g. 'tag1,tag2'


Macros:
- $__time(column) -&gt; column as "time"
- $__timeEpoch -&gt; extract(epoch from column) as "time"
- $__timeFilter(column) -&gt; column BETWEEN '2017-04-21T05:01:17Z' AND '2017-04-21T05:01:17Z'
- $__unixEpochFilter(column) -&gt;  column &gt;= 1492750877 AND column &lt;= 1492750877
- $__unixEpochNanoFilter(column) -&gt;  column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872

Or build your own conditionals using these macros which just return the values:
- $__timeFrom() -&gt;  '2017-04-21T05:01:17Z'
- $__timeTo() -&gt;  '2017-04-21T05:01:17Z'
- $__unixEpochFrom() -&gt;  1492750877
- $__unixEpochTo() -&gt;  1492750877
- $__unixEpochNanoFrom() -&gt;  1494410783152415214
- $__unixEpochNanoTo() -&gt;  1494497183142514872
		</pre>`,
  },
  cloudDatasource: {
    nameDetail: 'CloudWatch Details',
    authPro: 'Auth Provider',
    tip: 'Credentials profile name, as specified in ~/.aws/credentials, leave blank for default.',
    creName: 'Credentials Profile Name',
    keyId: 'Access Key ID',
    secretKey: 'Secret Access Key',
    ranTip: 'ARN of Assume Role',
    defaultRegion: 'Default Region',
    customMet: 'Custom Metrics',
    regTip: 'Specify the region, such as for US West (Oregon) use ` us-west-2 ` as the region.',
    customTip: 'Namespaces of Custom Metrics.',
    annotationProfile: 'Prefix matching',
    annotationAction: 'Action',
    alarmName: 'Alarm Name',
    region: 'Region',
    dimensions: 'Dimensions',
    info: 'Id can include numbers, letters, and underscore, and must start with a lowercase letter.',
    expression: 'Expression',
    minPro: 'Min period',
    minTime: 'Minimum interval between points in seconds',
    aliasVar: 'Alias replacement variables:',
    selectReg: 'Select region',
    nameSpace: 'Namespace',
    selectName: 'Select namespace',
    metricName: 'Metric Name',
    selectMetricName: 'Select metric name',
    idTip: 'Id can include numbers, letters, and underscore, and must start with a lowercase letter.',
    expressionTip:
      'Optionally you can add an expression here. Please note that if a math expression that is referencing other queries is being used, it will not be possible to create an alert rule based on this query',
    aliasTip:
      'Alias replacement variables: {{metric}}, {{stat}}, {{namespace}}, {{region}}, {{period}}, {{label}}, {{YOUR_DIMENSION_NAME}}',
    match: ' Match Exact',
    matchTip: 'Only show metrics that exactly match all defined dimension names',
    period: 'Period',
    periodTip: 'Minimum interval between points in seconds',
    queryPro: 'Query Preview',
    dataId: 'Metric Data Query ID',
    dataQuery: 'Metric Data Query Expression',
  },
  elaDatasource: {
    elaDetail: 'Elasticsearch details',
    indexName: 'Index name',
    indexPlace: 'es-index-name',
    pattern: 'Pattern',
    timeField: 'Time field name',
    maxDatapoint: 'Max concurrent Shard Requests',
    minInter: 'Min time interval',
    intervalTip: 'Value is not valid, you can use number with time unit specifier: y, M, w, d, h, m, s',
    tipBefore:
      'A lower limit for the auto group by time interval. Recommended to be set to write frequency, for example',
    tipEnd: 'if your data is written every minute.',
    massName: 'Message field name',
    levelName: 'Level field name',
    log: 'Logs',
    fieldMap: 'Field mappings',
    minCount: 'Min Doc Count',
    timEdge: 'Trim edges',
    trmTip: 'Trim the edges on the timeseries datapoints',
    offSet: 'Offset',
    offTip:
      'Change the start value of each bucket by the specified positive (+) or negative offset (-) duration, such as 1h for an hour, or 1d for a day',
    orderBy: 'Order By',
    mis: 'Missing',
    misMas:
      'The missing parameter defines how documents that are missing a value should be treated. By default they will be ignored but it is also possible to treat them as if they had a value',
    lucQuery: 'Lucene query',
    pre: 'Precision',
    preTip: 'Elasticsearch v5.0 and above: Scripting language is Painless. Use ',
    preTip2: 'Elasticsearch pre-v5.0: Scripting language is per default Groovy if not changed. For Groovy use',
    preEnd: 'to reference a variable',
    predict: 'Predict',
    pres: 'Percentiles',
    precisTh: 'Precision threshold',
    elaTip: 'Click to toggle show / hide metric',
    filterQueries: 'Filter Queries',
  },
  grafanaDatasource: {
    filterBy: 'Filter by',
    dashboardType:
      'Dashboard: This will fetch annotation and alert state changes for whole dashboard and show them only on the events originating panel.',
    tagType: 'Tags: This will fetch any annotation events that match the tags filter.',
    maxLimit: 'Max limit',
    annoTip:
      'By default Grafana only shows annotations that match all tags in the query. Enabling this returns annotations that match any of the tags in the query.',
    aTag: 'A tag entered here as foo will match',
    fooTag: 'annotation tags foo',
    annoKey: 'annotation key-value tags formatted as foo:bar',
    queryName: 'Test data: random walk',
  },
  azureDatasource: {
    azureDetial: 'Azure Monitor Details',
    azureCloud: 'Azure Cloud',
    cloudTip: 'Choose an Azure Cloud.',
    directId: 'Directory (tenant) ID',
    clientId: 'Application (client) ID',
    clientSert: 'Client Secret',
    defaultDesc: 'Default Subscription',
    loadSub: 'Load Subscriptions',
    appDetail: 'Application Insights Details',
    apiKey: 'API Key',
    appId: 'Application ID',
    logDetail: 'Azure Log Analytics API Details',
    logTip: 'Same details as Azure Monitor API',
    defaultWork: 'Default Workspace',
    loadWork: 'Load Workspaces',
    defaultTip: 'Choose the default/preferred Workspace for Azure Log Analytics queries.',
    workTip: 'Workspaces are pulled from default subscription selected above.',
    service: 'Service',
    metricName: 'Metric Namespace',
    timeGra: 'Time Grain',
    autoInterval: 'Auto Interval',
    dimen: 'Dimension',
    eq: 'eq',
    legendFormat: 'Legend Format',
    aliasPatterns: 'alias patterns (see help for more info)',
    shortCut: '(Run Query: Shift+Enter, Trigger Suggestion: Ctrl+Space)',
    formatAs: 'Format As',
    rowQuery: 'Raw Query',
    helpMas: `Format as Table:
       --return any set of columns
       Format as Time series:
       -- Requires a column of type datetime
       -- returns the first column with a numeric datatype as the value
       -- (Optional: returns the first column with type string to represent the series name. If no column is found the column name of the value column is used as series name)
       Example Time Series Query:
       AzureActivity
       | where $__timeFilter()
       | summarize count() by Category, bin(TimeGenerated, 60min)
       | order by TimeGenerated asc
       Macros:
       - $__timeFilter()-> TimeGenerated >= datetime(2018-06-05T18:09:58.907Z) and TimeGenerated <= datetime(2018-06-05T20:09:58.907Z)
       - $__timeFilter(datetimeColumn) -> datetimeColumn >= datetime(2018-06-05T18:09:58.907Z) and datetimeColumn <= datetime(2018-06-05T20:09:58.907Z)
       - $__escapeMulti($myTemplateVar) -> $myTemplateVar should be a multi-value template variables that contains illegal characters
       - $__contains(aColumn, $myTemplateVar) -> aColumn in ($myTemplateVar)
         If using the All option, then check the Include All Option checkbox and in the Custom all value field type in: all. If All is chosen-> 1 == 1
       Or build your own conditionals using these built-in variables which just return the values:
       - $__timeFrom -> datetime(2018-06-05T18:09:58.907Z)
       - $__timeTo -> datetime(2018-06-05T20:09:58.907Z)
       - $__interval -> 5m
       Examples:
       - | where $__timeFilter
       - | where TimeGenerated >= $__timeFrom and TimeGenerated <= $__timeTo
       - | summarize count() by Category, bin(TimeGenerated,$__interval)`,
    splitOn: 'Split On',
    notSupport: 'No annotations support for',
    annotationFormat: 'Annotation Query Format',
    annotationTip: `
       An annotation is an event that is overlaid on top of graphs. The query can have up to three columns per row, the datetime column is mandatory. Annotation rendering is expensive so it is important to limit the number of rows returned.
       - column with the datetime type.
       - column with alias: Text or text for the annotation text
       - column with alias: Tags or tags for annotation tags. This is should return a comma separated string of tags e.g. 'tag1,tag2'
       Macros:
           - $__timeFilter() -> TimeGenerated >= datetime(2018-06-05T18:09:58.907Z) and TimeGenerated <= datetime(2018-06-05T20:09:58.907Z)
           - $__timeFilter(datetimeColumn) -> datetimeColumn >= datetime(2018-06-05T18:09:58.907Z) and datetimeColumn <= datetime(2018-06-05T20:09:58.907Z)
           Or build your own conditionals using these built-in variables which just return the values:
           - $__timeFrom -> datetime(2018-06-05T18:09:58.907Z)
           - $__timeTo -> datetime(2018-06-05T20:09:58.907Z)
           - $__interval -> 5m`,
    matchAny: 'Match any',
  },
  graphDatasource: {
    graphDetail: 'Graphite details',
    topTip: 'This option controls what functions are available in the Graphite query editor.',
    mas1:
      'There are different types of Graphite compatible backends. Here you can specify the type you are using.If you are using',
    mas2:
      ' then select that here. This will enable Metrictank specific features like query processing meta data. Metrictank is a multi-tenant timeseries engine for Graphite and friends.',
    graphQuery: 'Graphite query',
    graphEvent: 'Graphite events tags',
    series: 'Series',
    tagKey: 'Tag key',
    tagValue: 'Tag value',
    and: 'AND',
    function: 'Functions',
    or: 'Or',
  },
  dashboardDatasource: {
    tipMas: 'This dashboard does not have other panels. Add queries to other panels and try again',
    resultMas: 'Use results from panel',
  },
  influxdbDatasource: {
    influxdbDetial: 'InfluxDB Details',
    httpTip: `You can use either GET or POST HTTP method to query your InfluxDB database. The POST
       method allows you to perform heavy requests (with a lots of WHERE clause) while the GET method
       will restrict you and return an error if the query is too large.`,
    access: 'Database Access',
    accessTip: `Setting the database for this datasource does not deny access to other databases.The InfluxDB query syntax allows switching the database in the query.For example:
      SHOW MEASUREMENTS ON _internal or SELECT * FROM "_internal".."database" LIMIT 10`,
    accessMas: 'To support data isolation and security, make sure appropriate permissions are configured in InfluxDB.',
    minInter: 'Min time interval',
    intervalTip: `A lower limit for the auto group by time interval. Recommended to be set to write frequency,for example 1m if your data is written every minute.`,
    where: 'WHERE',
    select: 'SELECT',
    slimit: 'SLIMIT',
    place: 'select text from events where $timeFilter limit 1000',
    filedMap: 'Field mappings',
    filedTip:
      'If your influxdb query returns more than one field you need to specify the column names below. An annotation event is composed of a title, tags, and an additional text field.',
  },
  inputDatasource: {
    shareData: 'Shared Data:',
    enterCsv: 'Enter CSV',
    infoBox: `This data is stored in the datasource json and is returned to every user in the initial request for any datasource.
        This is an appropriate place to enter a few values. Large datasets will perform better in other datasources.`,
    noteMas: 'Changes to this data will only be reflected after a browser refresh.',
  },
  lokiDatasource: {
    maxLine: 'Maximum lines',
    tip: `Loki queries must contain a limit of the maximum number of lines returned (default: 1000). Increase this limit
       to have a bigger result set for ad-hoc analysis. Decrease this limit if your browser becomes sluggish when
       displaying the log results.`,
    deviceField: 'Derived fields',
    fieldTip: `Derived fields can be used to extract new fields from the log message and create link from it's value.`,
    hideMas: 'Hide example log message',
    showMas: 'Show example log message',
    debugLog: 'Debug log message',
    placeholderMas: 'Paste an example log line here to test the regular expressions of your derived fields',
    tooltip: 'Use to parse and capture some part of the log message. You can use the captured groups in the template.',
    enterQuery: 'Enter a Loki query',
    noLabel: '(No labels found)',
    loadLabel: 'Loading labels...',
    logLabel: 'Log labels',
  },
  datasource: {
    connectionLimits: 'Connection limits',
    maxOpen: 'Max open',
    unlimited: 'unlimited',
    maxOpeInfo1: `The maximum number of open connections to the database. If `,
    maxOpeInfo2: 'Max idle connections',
    maxOpeInfo3: ' is greater than 0 and the',
    maxOpeInfo4: 'Max open connections',
    maxOpeInfo5: ' is less than',
    maxOpeInfo6: ' then',
    maxOpeInfo7: ' will be reduced to match the ',
    maxOpeInfo8: ' limit. If set to 0, there is no limit on the number of open connections.',
    maxOpeInfo9: 'If the database is of shared type, max open cannot exceed 100.',
    maxIdle: 'Max idle',
    maxIdleInfo1: `The maximum number of connections in the idle connection pool. If `,
    maxIdleInfo2: ` is greater than 0 but less than the `,
    maxIdleInfo3: ` limit. If set to 0, no idle connections are retained.`,
    maxIdleInfo4: ' then the ',
    maxLifetime: 'Max lifetime',
    maxLifetime1:
      'The maximum amount of time in seconds a connection may be reused. If set to 0, connections are reused forever.',
    maxLifetime2: 'This should always be lower than configured ',
    maxLifetime3: 'wait_timeout',
    maxLifetime4: ' in MySQL.',
    minTimeInterval: `Min time interval`,
    minInfo1: `A lower limit for the auto group by time interval. Recommended to be set to write frequency,
        for example `,
    minInfo2: ` if your data is written every minute.`,
    FROM: 'FROM',
    timeColumn: 'Time column',
    metricColumn: 'Metric Column',
    metricColumnInfo: `Column to be used as metric name for the value column.`,
    SELECT: 'SELECT',
    WHERE: `WHERE`,
    GROUPBY: 'GROUP BY',
    ORDERBY: 'ORDER BY',
    JOIN: 'JOIN',
    ON: 'ON',
    formatAs: 'Format as',
    editSQL: 'Edit SQL',
    queryBuilder: `Query Builder`,
    generatedSQL: 'Generated SQL',
    warning: 'Warning',
    warnText: `Switching to query builder may overwrite your raw SQL.`,
    dataSourceError: 'Data Source Error',
  },
  opentsdb: {
    aggregator: 'Aggregator',
    aliasInfo: `Use patterns like $tag_tagname to replace part of the alias for a tag value`,
    metricName: 'metric name',
    seriesAlias: 'series alias',
    downSample: 'Down sample',
    downSampleInfo: `blank for auto, or for example `,
    disableDownsampling: 'Disable downsampling',
    filtersInfo: `Filters does not work with tags, either of the two will work but not both.`,
    key: 'key',
    addFilter: 'add filter',
    tagsInfo: 'Please use filters, tags are deprecated in opentsdb 2.2',
    addTag: 'add tag',
    rate: 'Rate',
    counter: 'Counter',
    counterMax: 'Counter Max',
    maxValue: 'max value',
    resetValue: 'Reset Value',
    resetvalue: 'reset value',
    explicitTags: 'Explicit tags',
    metricsQuery: 'metrics query',
    eventname: 'events.eventname',
    showGlobalAnnotations: 'Show Global Annotations?',
  },
  mysql: {
    userPermission: `<h5>User Permission</h5>
		<p>
			The database user should only be granted SELECT permissions on the specified database &amp; tables you want to query.
			WISE-IoTSuite/Dashboard does not validate that queries are safe so queries can contain any SQL statement. For example, statements
			like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. To protect against this we
			<strong>Highly</strong> recommmend you create a specific MySQL user with restricted permissions.

			Checkout the <a class="external-link" target="_blank" href="http://docs.grafana.org/features/datasources/mysql/">MySQL Data Source Docs</a> for more information.
        </p>`,
    helpContent:
      `<pre class="gf-form-pre alert alert-info">Time series:\n` +
      `- return column named time or time_sec (in UTC), as a unix time stamp or any sql native date data type. You can use the macros below.\n` +
      `- return column(s) with numeric datatype as values\n` +
      `Optional:\n` +
      `  - return column named <i>metric</i> to represent the series name.\n` +
      `  - If multiple value columns are returned the metric column is used as prefix.\n` +
      `  - If no column named metric is found the column name of the value column is used as series name\n\n` +
      `Resultsets of time series queries need to be sorted by time.\n\n` +
      `Table:\n` +
      `- return any set of columns\n\n` +
      `Macros:\n` +
      `- $__time(column) -&gt; UNIX_TIMESTAMP(column) as time_sec\n` +
      `- $__timeEpoch(column) -&gt; UNIX_TIMESTAMP(column) as time_sec\n` +
      `- $__timeFilter(column) -&gt; column BETWEEN FROM_UNIXTIME(1492750877) AND FROM_UNIXTIME(1492750877)\n` +
      `- $__unixEpochFilter(column) -&gt;  time_unix_epoch &gt; 1492750877 AND time_unix_epoch &lt; 1492750877\n` +
      `- $__unixEpochNanoFilter(column) -&gt;  column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872\n` +
      `- $__timeGroup(column,'5m'[, fillvalue]) -&gt; cast(cast(UNIX_TIMESTAMP(column)/(300) as signed)*300 as signed)\n` +
      `     by setting fillvalue grafana will fill in missing values according to the interval\n` +
      `     fillvalue can be either a literal value, NULL or previous; previous will fill in the previous seen value or NULL if none has been seen yet\n` +
      `- $__timeGroupAlias(column,'5m') -&gt; cast(cast(UNIX_TIMESTAMP(column)/(300) as signed)*300 as signed) AS "time\n` +
      `- $__unixEpochGroup(column,'5m') -&gt; column DIV 300 * 300\n` +
      `- $__unixEpochGroupAlias(column,'5m') -&gt; column DIV 300 * 300 AS "time"\n\n` +
      `Example of group by and order by with $__timeGroup:\n` +
      `SELECT\n` +
      `  $__timeGroupAlias(timestamp_col, '1h'),\n` +
      `  sum(value_double) as value\n` +
      `FROM yourtable\n` +
      `GROUP BY 1\n` +
      `ORDER BY 1\n\n` +
      `Or build your own conditionals using these macros which just return the values:\n` +
      `- $__timeFrom() -&gt; FROM_UNIXTIME(1492750877)\n` +
      `- $__timeTo() -&gt;  FROM_UNIXTIME(1492750877)\n` +
      `- $__unixEpochFrom() -&gt;  1492750877\n` +
      `- $__unixEpochTo() -&gt;  1492750877\n` +
      `- $__unixEpochNanoFrom() -&gt;  1494410783152415214\n` +
      `- $__unixEpochNanoTo() -&gt;  1494497183142514872\n` +
      `</pre>`,
    annotationHelp: `
        <pre class="gf-form-pre alert alert-info"><h6>Annotation Query Format</h6>
An annotation is an event that is overlaid on top of graphs. The query can have up to three columns per row, the <i>time</i> or <i>time_sec</i> column is mandatory. Annotation rendering is expensive so it is important to limit the number of rows returned.

- column with alias: <b>time</b> or <i>time_sec</i> for the annotation event time. Use epoch time or any native date data type.
- column with alias: <b>text</b> for the annotation text
- column with alias: <b>tags</b> for annotation tags. This is a comma separated string of tags e.g. 'tag1,tag2'


Macros:
- $__time(column) -&gt; UNIX_TIMESTAMP(column) as time (or as time_sec)
- $__timeEpoch(column) -&gt; UNIX_TIMESTAMP(column) as time (or as time_sec)
- $__timeFilter(column) -&gt; column BETWEEN FROM_UNIXTIME(1492750877) AND FROM_UNIXTIME(1492750877)
- $__unixEpochFilter(column) -&gt;  time_unix_epoch &gt; 1492750877 AND time_unix_epoch &lt; 1492750877
- $__unixEpochNanoFilter(column) -&gt;  column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872

Or build your own conditionals using these macros which just return the values:
- $__timeFrom() -&gt; FROM_UNIXTIME(1492750877)
- $__timeTo() -&gt;  FROM_UNIXTIME(1492750877)
- $__unixEpochFrom() -&gt;  1492750877
- $__unixEpochTo() -&gt;  1492750877
- $__unixEpochNanoFrom() -&gt;  1494410783152415214
- $__unixEpochNanoTo() -&gt;  1494497183142514872
		</pre>`,
  },
  mssql: {
    encrypt: 'Encrypt',
    encryptInfo:
      'Determines whether or to which extent a secure SSL TCP/IP connection will be negotiated with the server.',
    encryptInfo1: `Data sent between client and server is not encrypted.`,
    encryptInfo2: `Data sent between client and server is not encrypted beyond the login packet. (default)`,
    encryptInfo3: `Data sent between client and server is encrypted.`,
    encryptInfo4: `If you're using an older version of Microsoft SQL Server like 2008 and 2008R2 you may need to disable encryption to be able to connect.`,
    userPermission: `<h5>User Permission</h5>
		<p>
			The database user should only be granted SELECT permissions on the specified database &amp; tables you want to query.
			WISE-IoTSuite/Dashboard does not validate that queries are safe so queries can contain any SQL statement. For example, statements
			like <code>USE otherdb;</code> and <code>DROP TABLE user;</code> would be executed. To protect against this we
			<strong>Highly</strong> recommmend you create a specific MSSQL user with restricted permissions.
        </p>`,
    helpContent:
      `<pre class="gf-form-pre alert alert-info">Time series:\n` +
      `- return column named time (in UTC), as a unix time stamp or any sql native date data type. You can use the macros below.\n` +
      `- any other columns returned will be the time point values.\n` +
      `Optional:\n` +
      `  - return column named <i>metric</i> to represent the series name.\n` +
      `  - If multiple value columns are returned the metric column is used as prefix.\n` +
      `  - If no column named metric is found the column name of the value column is used as series name\n\n` +
      `Resultsets of time series queries need to be sorted by time.\n\n` +
      `Table:\n` +
      `- return any set of columns\n\n` +
      `Macros:\n` +
      `- $__time(column) -&gt; column AS time\n` +
      `- $__timeEpoch(column) -&gt; DATEDIFF(second, '1970-01-01', column) AS time\n` +
      `- $__timeFilter(column) -&gt; column BETWEEN '2017-04-21T05:01:17Z' AND '2017-04-21T05:01:17Z'\n` +
      `- $__unixEpochFilter(column) -&gt; column &gt;= 1492750877 AND column &lt;= 1492750877\n` +
      `- $__unixEpochNanoFilter(column) -&gt;  column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872\n` +
      `- $__timeGroup(column, '5m'[, fillvalue]) -&gt; CAST(ROUND(DATEDIFF(second, '1970-01-01', column)/300.0, 0) as bigint)*300.\n` +
      `     by setting fillvalue grafana will fill in missing values according to the interval\n` +
      `     fillvalue can be either a literal value, NULL or previous; previous will fill in the previous seen value or NULL if none has been seen yet\n` +
      `- $__timeGroupAlias(column, '5m'[, fillvalue]) -&gt; CAST(ROUND(DATEDIFF(second, '1970-01-01', column)/300.0, 0) as bigint)*300 AS [time]\n` +
      `- $__unixEpochGroup(column,'5m') -&gt; FLOOR(column/300)*300\n` +
      `- $__unixEpochGroupAlias(column,'5m') -&gt; FLOOR(column/300)*300 AS [time]\n\n` +
      `Example of group by and order by with $__timeGroup:\n` +
      `SELECT\n` +
      `  $__timeGroup(date_time_col, '1h') AS time,\n` +
      `  sum(value) as value\n` +
      `FROM yourtable\n` +
      `GROUP BY $__timeGroup(date_time_col, '1h')\n` +
      `ORDER BY 1\n\n` +
      `Or build your own conditionals using these macros which just return the values:\n` +
      `- $__timeFrom() -&gt;  '2017-04-21T05:01:17Z'\n` +
      `- $__timeTo() -&gt;  '2017-04-21T05:01:17Z'\n` +
      `- $__unixEpochFrom() -&gt; 1492750877\n` +
      `- $__unixEpochTo() -&gt; 1492750877\n` +
      `- $__unixEpochNanoFrom() -&gt;  1494410783152415214\n` +
      `- $__unixEpochNanoTo() -&gt;  1494497183142514872\n` +
      `</pre>`,
    annotationHelp: `<pre class="gf-form-pre alert alert-info"><h6>Annotation Query Format</h6>
An annotation is an event that is overlaid on top of graphs. The query can have up to three columns per row, the <b>time</b> column is mandatory. Annotation rendering is expensive so it is important to limit the number of rows returned.

- column with alias: <b>time</b> for the annotation event time. Use epoch time or any native date data type.
- column with alias: <b>text</b> for the annotation text.
- column with alias: <b>tags</b> for annotation tags. This is a comma separated string of tags e.g. 'tag1,tag2'.


Macros:
- $__time(column) -&gt; column AS time
- $__timeEpoch(column) -&gt; DATEDIFF(second, '1970-01-01', column) AS time
- $__timeFilter(column) -&gt; column BETWEEN '2017-04-21T05:01:17Z' AND '2017-04-21T05:01:17Z'
- $__unixEpochFilter(column) -&gt; column &gt;= 1492750877 AND column &lt;= 1492750877
- $__unixEpochNanoFilter(column) -&gt;  column &gt;= 1494410783152415214 AND column &lt;= 1494497183142514872

Or build your own conditionals using these macros which just return the values:
- $__timeFrom() -&gt;  '2017-04-21T05:01:17Z'
- $__timeTo() -&gt;  '2017-04-21T05:01:17Z'
- $__unixEpochFrom() -&gt; 1492750877
- $__unixEpochTo() -&gt; 1492750877
- $__unixEpochNanoFrom() -&gt;  1494410783152415214
- $__unixEpochNanoTo() -&gt;  1494497183142514872
        </pre>`,
  },
  logoSetting: {
    orgName: 'Org Name',
    srpFramePBLogo: 'Powered By Logo',
    srpFramePBLogoConf: 'Powered By Logo',
    loginPageBgConf: 'Login Page Background Image Configuration',
    loginTopLogoConf: 'Login Box Top Logo Configuration',
    loginTopLogo: 'Login Box Top Logo',
    copyrightInfoConf: 'Copyright Information Configuration',
    copyrightInfo: 'Copyright Information',
    copyrightTips:
      'Fill in the copyright information text content of the login page here, otherwise the default copyright information will be displayed; Fill in "null" to not display copyright information',
    loginPageConf: 'Login Page Configuration',
    activateDes: 'Click the activation button on the right to refresh the page and activate the logo setting function for saving.'
  },
};

export default enUS;
